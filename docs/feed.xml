<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://willrc.co.uk/feed.xml" rel="self" type="application/atom+xml" /><link href="https://willrc.co.uk/" rel="alternate" type="text/html" /><updated>2023-11-28T11:12:21+00:00</updated><id>https://willrc.co.uk/feed.xml</id><title type="html">Will Ranjan-Churchill</title><subtitle>An internet connection does not an expert make.</subtitle><entry><title type="html">I’ve recently changed how I consume content</title><link href="https://willrc.co.uk/articles/how-i-consume-content/" rel="alternate" type="text/html" title="I’ve recently changed how I consume content" /><published>2023-11-23T10:00:00+00:00</published><updated>2023-11-23T10:00:00+00:00</updated><id>https://willrc.co.uk/articles/how-i-consume-content</id><content type="html" xml:base="https://willrc.co.uk/articles/how-i-consume-content/"><![CDATA[<p>I’ve been doing a revamp of the way I consume data lately, and in the interest of sharing (and having more content to write) I thought I’d post it here.</p>

<p>This also coincided with me getting a new phone, and not reinstalling many of my ‘usual’ social media apps. I’ve realised how much of my time I spent on X - not just doom-scrolling (though there was plenty of that), but also as a source of news, and sometimes a place to store thoughts.</p>

<p>Anyway, here’s how I digitally organise my brain. Shout out to the two big apps in my life: <a href="https://omnivore.app/">Omnivore</a>, and <a href="https://obsidian.md/">Obsidian</a>. They feature a lot in this post.</p>

<h2 id="the-funnel---where-i-get-my-content">The Funnel - where I get my content</h2>
<h3 id="mastodon">Mastodon</h3>
<p>Since I don’t really use Twitter/X anymore, I’ve joined the pilgrimage to Mastodon. I think I’m still a little way off where I was at peak Twitter, but that is mostly because I’m trying to compare 10 years of Twitter use with like 10 months on the Fediverse. That said I do get a good amount of use from it - particularly accounts like <a href="https://mastodon.world/@longreads">Longreads</a> or more tech-specific feeds.</p>

<p>I’ve talked a little before about the way that <a href="https://willrc.co.uk/articles/mastodon-vs-twitter/">Mastodon differs from Twitter</a>, but one of the benefits, for me at least, is that it I’ve found it very easy to curate a feed that is predominantly about technology. I struggle to remember what the early days of Twitter were like. But even before it devolved it was still quite a “broad” place. Good, in its own way, but perhaps less focused.</p>
<h3 id="rss-feeds-and-omnivore">RSS feeds and Omnivore</h3>
<p>I’ve had a tumultuous relationship with RSS over the years. Like many, for the last decade I lamented the loss of Google Reader. In it’s wake, I’ve tried a lot of options, from <a href="https://feedly.com/">Feedly</a> to <a href="https://about.flipboard.com/">Flipboard</a>. But for some reason they’ve never really stuck. I think because I would use the RSS reader as the place to read content, and then have a different app to make notes, and then a different one again to store things like highlights / favourite posts etc.</p>

<p>Enter <a href="https://omnivore.app/">Omnivore</a> - for me it’s the first actual “most in one” platform that I’ve used where I actually do the things it suggests in the platform. You can subscribe to RSS feeds and the platform will periodically pull those feeds into your inbox, sync them for offline viewing (if you’re on mobile), and also allow you to make highlights and annotations. You can also create email addresses to allow you to sign up to newsletters, and read those in the app, keeping your inbox free of that ever expanding filtered folder of unread emails.</p>

<p>But neither of those were what initially drew me to Omnivore. It was actually it’s function as a “read it later” platform that swung it for me. It’s clean, has the usual tagging functionality you’d expect, and even lets you highlight and annotate pages from the app. Most importantly for me though, the mobile app is fantastic, and the ability to sync and read longform content offline has been a game changer. Despite living in 2023, I still find myself in patches of no signal for considerable stretches of my commute. Omnivore makes it really easy to scroll the usual places for things to read, send them over to the platform, and then actually do the reading while I’ve got no signal.</p>

<p>It will also allow you to spit things out into other applications, which for me is great because of the next part of my thought pipeline…</p>

<h2 id="the-hub---where-it-all-lives">The hub - where it all lives</h2>
<h3 id="obsidian">Obsidian</h3>
<p>I’ve been back and forth with <a href="https://obsidian.md/">Obsidian</a> for a while. A mixture of not really having the rest of my pipeline sorted, and being entrenched in <a href="https://www.notion.so/">Notion</a> for so long, meant that despite conceptually loving it, Obsidian never really stuck for me.</p>

<p>Meanwhile I loved Notion. It works like my brain works, and it can be adapted to handle pretty much anything. You need a basic project management tool? Somewhere to send articles to read and annotate later? A place to track habits? Somewhere to draft blog posts? Notion can handle all of that easily.</p>

<p>But lately it’s been running really slowly for me - something that is a common criticism of the platform. For me also, I need it to work smoothly offline, and Notion just doesn’t. I find myself doing a lot of note-taking and reading on my phone. Notion, for all its many many perks, does not behave well for me when all I want to do is fire up an app and jot down some thoughts.</p>

<p>Meanwhile, Obsidian is an offline product. It offers the same experience across platforms - handy for someone who spends an equal amount of time across Windows, Linux, and Android. It also has a number of options for dealing with syncing across devices. I’ve opted to pay for Obsidian’s own sync function (about £80 for the year), but there are other community driven ways of dealing with this.</p>

<p>Speaking of the community, there are thousands of extensions you can download and use to enhance Obsidian. It takes the opposite approach to tools like Notion, and gives you a streamlined base that you can customise exactly how you want, rather than giving you the world and letting you decide which corners you want to live in.</p>

<p>Neither option is inherently better or worse. The fact that everything is immediately available to you in Notion in some ways makes it easier to discover what it can do. But part of my issue with it has been it’s speed, and it’s hard to look past that.</p>

<h2 id="what-ive-learned">What I’ve learned</h2>
<h3 id="being-offline-is-more-important-to-me-than-i-realised">Being offline is more important to me than I realised</h3>
<p>I should have known this, having <a href="https://willrc.co.uk/musings/this-might-be-the-last-time-you-hear-me-talk-about-my-chromebook/">oft lamented</a> the old-school Chromebooks with their very generous definition of working online. (Reader: they don’t.)</p>

<p>I’m not one to claim that I want to optimise every second of my day. But equally I have really noticed how much more on the ball with specific topics I’ve been since reworking my pipeline. I can use the time on my commute to read and reflect on things that are important to me, rather than just scrolling aimlessly through my socials.</p>

<p>It goes beyond just using my commute time better. There’s much less friction between me having a thought and writing it down - and specifically between me reading something and having a thought about it, and then writing that down. Omnivore even syncs my Kindle highlights for me, so I’m not confined to just ruminating on news stories.</p>
<h3 id="simpler-is-better-but-its-also-subjective">Simpler is better, but it’s also subjective</h3>
<p>I didn’t intend for this to be an advert for Omnivore and Obsidian, and these platforms definitely won’t be for everyone. But one of the main draws for me is Obsidian’s use of Markdown. As I’ve <a href="https://willrc.co.uk/musings/i-blog-in-markdown-now/">mentioned before</a>, I really like the format for writing, but might not be everyone’s cup of tea. That Markdown-first way of capturing content, combined with a flexible way of storing, sorting, and linking data, makes it really easy for me to use Obsidian as my complete personal library.</p>

<h2 id="final-thoughts">Final Thoughts</h2>
<p>In reality, I probably count have replaced all of the above with the following three takeaways:</p>

<ol>
  <li>Being more selective about the social media you consume makes it easier to give yourself the brain space to actually consume and reflect on it. Go figure…</li>
  <li>Technology isn’t always about fancy plugins and shiny features. Sometimes the best tech just gets out of your way and lets you do the thinking.</li>
  <li>It feels like we’re constantly pushed towards cloud-based and online options for products - in part because it’s easier there to push the shiny new things that keep you interested in the platform. But offline is just as good for a lot of things - and better for some.</li>
</ol>

<p>Or, to put it even more simply: 
Technology exists to make things easier. If it isn’t doing that, then rethink what you’re using it for.</p>]]></content><author><name></name></author><category term="technology" /><category term="online" /><category term="productivity" /><category term="omnivore" /><category term="obsidian" /><category term="featured" /><summary type="html"><![CDATA[It's not a secret that the way we consume online content can often be flawed. But I've never really played with that, until now.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://willrc.co.uk/assets/images/articles/stuttgart-library.jpg" /><media:content medium="image" url="https://willrc.co.uk/assets/images/articles/stuttgart-library.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Takeaways from the IT Leaders Summit</title><link href="https://willrc.co.uk/articles/takeaways-from-the-it-leaders-summit/" rel="alternate" type="text/html" title="Takeaways from the IT Leaders Summit" /><published>2023-10-09T11:00:00+01:00</published><updated>2023-10-09T11:00:00+01:00</updated><id>https://willrc.co.uk/articles/takeaways-from-the-it-leaders-summit</id><content type="html" xml:base="https://willrc.co.uk/articles/takeaways-from-the-it-leaders-summit/"><![CDATA[<p>Last week I went to <a href="https://www.computing.co.uk/">Computing’s</a> <a href="https://event.computing.co.uk/itleaderssummit2023/en/page/home">IT Leaders Summit</a>. Amongst other things, we talked about managing IT Security, the rise of Generative Artificial Intelligence, and what’s going on with IT budgets. Here are some of the things I’ve taken away.</p>

<h2 id="it-spending-is-up">IT spending is up</h2>

<p>This is driven by the higher cost of essential tech, and increase in the need for IT spending, and the rising cost of SaaS (Software as a Service) and Cloud products. (If all of those sound like they mean the same thing, welcome to IT budgeting 101.)</p>

<p>In one of the opening talks of the Summit, Computing’s John Leonard went through results of a survey the publication had conducted across the IT sector. Of the respondents, 50% reported an increase in real terms in the money they spent on IT compared to last year. Of this increase, the largest rises went to cloud infrastructure. Some organisations had reported rises of as much as 4x inflation for their licenses. While that was certainly at the higher end, the likes of Microsoft, Google, and Salesforce have or will be raising their prices by an average of 14% compared to 2022.</p>

<p>While actual spending is up, these are on things that individual companies don’t really have much control over. If you don’t want to pay the increase in license fees for your Microsoft 365 accounts, your other alternative is… Well you don’t really have one. At least, not one that doesn’t come with it’s own large costs to migrate. What this means is that the budgets that IT professionals have to play with when it comes to the “extra stuff” is greatly diminished. Companies are concerned about upcoming fixed costs - like what happens when your current software stack goes End Of Life and you’re forced to upgrade.</p>

<h2 id="strong-cyber-security-is-more-important-than-ever">Strong cyber security is more important than ever</h2>

<p>Traditional IT security is based on a very simple concept: here is a list of known viruses, bad people, and nefarious software. If you see it, delete it. That’s worked well enough for a while. But these days the problems aren’t confined to virus and spam emails. Modern hackers can leverage “safe” software - genuine applications that you have on your device right now - and twist their purpose.</p>

<p>In a talk on Zero Trust Security Measures, <a href="https://www.threatlocker.com/">Threatlocker’s</a> Seamus Lennon gave the example of a company which had been a victim of a ransomware attach using an email client, Windows Powershell, and the popular 7zip application. Blocking any of these apps is functionally impossible. You can’t run a company without your email client, and your Windows laptop can’t run without Powershell.</p>

<p>You can sort of mitigate for this in a “traditional” office setup, because your IT admin can stick a fancy firewall at the gates of your office and monitor everything that comes in and out. Except very few companies post-pandemic still operate in a way that makes this a failsafe. “The biggest challenge to network security,” says Lennon, “is that there is no network.” With the boom in home offices, remote working, and the average person now blurring the lines between personal and professional use of their office laptop, keeping devices safe in a world where ransomware attackers can use legitimate applications to cause damage is a IT security nightmare.</p>

<h2 id="ai-is-complicated">AI is… complicated</h2>

<p>And I don’t mean technically. There are a lot of things I hadn’t considered about Artificial Intelligence. Did you know, for example, that the increase in access to AI makes people less likely to collaborate? Dan McMahon from <a href="https://www.hymans.co.uk/">Hymans Robertson</a> made this point in a panel discussion. With AI tools cutting down on the grunt work needed for any given task, organisations are able to go further alone that they used to. Some are taking this as a sign that they don’t need to collaborate - it is much easier now to strike out on your own. I’m left to wonder, though it would be very hard to objectively measure this, whether progress in certain fields has actually slowed as a result of technology?</p>

<p class="pullquote">AI is likely to remain the plaything of the privileged. </p>

<p>AI is also likely to stay the purview of the privileged. Payment models for things like ChatGPT mean that the “free” version is several iterations behind what the paid plans provide. That’s not exactly new as a technology costing model. But Huseyin Seker from <a href="https://www.bcu.ac.uk/">Birmingham City University</a> made the point that as these costing models mature, those with resources are more likely to exponentially benefit from the technological gains that Artificial Intelligence provides.</p>

<p>Taking this thought a step further, much of generative AI “learns” from itself. By which I mean the exchanges are used to help modify and improve the platform. With barriers to access excluding certain groups, does that also mean we are more likely to create self-perpetuating echo-chambers of certain opinions?</p>

<p>And, spoiler alert, we’re about to talk more about payment for IT services…</p>

<h2 id="non-invasive-tech-is-going-to-cost-you">Non-invasive tech is going to cost you</h2>

<p>Recently, Meta announced they were exploring offering a <a href="https://www.theguardian.com/technology/2023/oct/03/facebook-instagram-charge-ad-free-eu-meta-mobile-desktop">paid tier for Instagram</a> for EU users. This paid tier would mean they were not subject to targetted adverts on the platform. This is part of a drive by the EU to end the era of “if the service is free, then you’re the product”. On the face of it, this isn’t a bad idea. The reason we can flick through Instagram reels “for free” is because the data of what we look at, like, and share is worth a lot of money to Meta. Offering a paid tier allows you to still consume user-generated content that you like, but without having your data mined and sold.</p>

<p>My concern is that we’re going to enter an age where the ability to consume content safe from algorithmic influence is only going to be for those who can afford it. In the same way that those benefiting from - and therefore influencing the direction of - AI. Here though, my concern is less about how the platforms will be shaped by those with money. It is more about what happens to those who won’t or can’t pay. They will still be served those ads, and the ads will be more aggressive for it.</p>

<blockquote>
  <p>I talk a little more about how pervasive technology is in my blog about <a href="/musings/technology-and-the-cult-of-celebrity/">Technology and the Cult of Celebrity</a></p>
</blockquote>

<h2 id="most-people-will-experience-online-harm">Most people will experience online harm</h2>

<p>Did you know that 62% of adults who access the internet have encountered online harm in the last week? Did you know that number goes up to 68% for 13-17 year olds? Chloe Colliver of <a href="https://www.ofcom.org.uk/home">Ofcom</a>, talked through some of the research that lead to the creation of the Online Safety Bill - due to be passed into law in the coming weeks.</p>

<p>The average person in the UK spends a little over 4 hours online every day, and of that nearly an hour is spent just on Meta apps and websites (Facebook, Instagram, WhatsApp, and Messenger). Other social media platforms, including Snap, X, and TikTok, also make up considerable amounts of time - especially for younger users. The Online Safety Bill is designed to protect UK Citizens from online harm, including illegal pornography, online trolling and other forms of verbal abuse, and certain types of internet fraud.</p>

<p class="pullquote">There are a number of legitimate reasons why someone might need to be anonymous online. </p>

<p>While a full discussion on the Bill is beyond the scope of this post, there are some things to note. It’s a very complicated document that can be interpreted in a number of ways - something that critics have been eager to point out. It also seems to demand the ability to decrypt secure messages, and calls into question how anonymous one can be on the internet. Clearly there are nefarious purposes for being untraceable online, but also there are a great many reasons someone might <em>need</em> to remain anonymous (tangentially related: <a href="https://anonyome.com/2021/04/removing-anonymity-online-would-risk-the-most-vulnerable-users/">this 2021 post from Anonyome Labs</a> about the risk of removing online anonymity).</p>

<p>That said, you can’t argue with the numbers. With more young people accessing the internet more often, at a younger age, there certainly needs to be more thought put into making sure people are safe. As pricing models for everything from Generative AI to messaging apps evolve, different groups are going to be targeted for different reasons.</p>

<blockquote>
  <p>Check out the <a href="https://counterhate.com/">Centre for Countering Digital Hate</a>, which (alongside being sued by Elon Musk) is celebrating its 4th anniversary.</p>
</blockquote>

<h2 id="final-thoughts">Final thoughts</h2>

<p>I continue to be a technology optimist. The benefits we can all get from advances are almost limitless. But it is just as important to remain aware of how fast moving tech can also be something to keep an eye on. We are continually putting more of ourselves online, conducting more of our business globally, and becoming more reliant on third parties to ensure our day-to-day lives run smoothly. There isn’t necessarily anything wrong with that, but make sure you keep yourself up-to-date.</p>

<p><strong><em>If you want to chat about anything you’ve read here, do feel free to reach out to me on <a href="mailto:will@willrc.co.uk">email</a>, or via <a href="https://twitter.com/willranjhill">X (formerly know as Twitter)</a>, <a href="https://fosstodon.org/@willrc">Mastodon</a>, or <a href="https://www.linkedin.com/in/willranjanchurchill/">LinkedIn</a>.</em></strong></p>]]></content><author><name></name></author><category term="technology" /><category term="cyber security" /><category term="IT budgeting" /><category term="AI" /><category term="chatgpt" /><category term="featured" /><summary type="html"><![CDATA[I attended Computing's 2023 IT Leaders Summit, and this is what I've come away thinking about.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://willrc.co.uk/assets/images/articles/laptop.jpg" /><media:content medium="image" url="https://willrc.co.uk/assets/images/articles/laptop.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">How the metaverse might change the world</title><link href="https://willrc.co.uk/articles/is-the-metaverse-worth-it/" rel="alternate" type="text/html" title="How the metaverse might change the world" /><published>2023-07-27T11:00:00+01:00</published><updated>2023-07-27T11:00:00+01:00</updated><id>https://willrc.co.uk/articles/is-the-metaverse-worth-it</id><content type="html" xml:base="https://willrc.co.uk/articles/is-the-metaverse-worth-it/"><![CDATA[<p><strong><em>It’s difficult to get me to shut-up about tech, so to help channel that excitement I’ve asked people to give me specific tech questions they have. Lots of people ask me questions about the “metaverse” so in this post I have a look at what it is, and will it be worth it?</em></strong></p>

<h2 id="what-is-the-metaverse">What is the Metaverse?</h2>

<p>Because the world of technology isn’t confusing enough already, there are actually two broadly held definitions for the word “metaverse”. The first is a term used to describe a sort of pseudo-space, combining Virtual and/or Augmented Reality, usually with the use of a headset that covers your eyes and often ears. Unless specified otherwise, this is the definition you should have in your mind when you read the rest of this post.</p>

<p>The other way you’ll likely hear the term “metaverse” is as the specific brand name for Mark Zuckerberg’s company’s metaverse. Mark Zuckerberg’s company is called Meta, and this is his universe. I guess Zuck was going for a “hoover” or “duct tape” approach to naming things - hoping that the name would become synonymous with the thing.</p>

<p>Incidentally, for etymology fans amongst you, the word “metaverse” is actually a creation of celebrated speculative fiction writer Neal Stephenson, for his 1992 book <em>Snow Crash</em>. The novel focuses on a post-economic-crash world sometime in the 21st Century. Much of the book takes place in a virtual reality world, hosted on the internet, which users access via a headset. Sometimes these sci-fi authors really miss the mark, don’t they?</p>

<p class="pullquote">We talk about the metaverse like it's one thing, but that isn't the case. </p>

<p>While you’re reading this, there is one more thing I want you to bear in mind. We’ll talk about “the metaverse” like its one thing, or one place, or even like its a single service that everyone hooks into - like the internet. This isn’t the case. Different companies are creating their own ‘verses to suit their own needs. To carry on the internet analogy, it might be helpful to think of each individual ‘verse like a website with its own login and password. It’s not exactly like that, but thinking about it in this way helps contextualise some of the barriers to adoption that we’ll talk about.</p>

<p>Alright - that’s the housekeeping done. We’ve talked a little bit about what the metaverse is, let have a look at some of the things we can use it for.</p>

<h2 id="using-the-metaverse-for-education">Using the Metaverse for education</h2>

<p>I remember when VR headsets first stuck their nose into the mainstream. I’d gone to visit a tech incubator in central London who’d just picked up a couple of HTC Vives. Part of the software package they were showing off put you in an assembly line, and had you manage the operations for building cars. This sort of thing was to be all the rage - education was going to lead the charge into a whole new world of experiences.</p>

<p>It wasn’t hard to see why. Slip on the headset and you could train to be a mechanic, a heart surgeon, a pilot, or even a sculptor. All without putting at risk someone’s car, heart, plane, or… rock…? More than that, you could attend campuses and join lectures run by some of the best minds on the planet - distance, language, and lecture hall capacity would all cease to be barriers.</p>

<p>Nearly a decade on from that visit, and I’ve yet to see any real leaps in that space. There are lots of reasons for that - not least of which was that, pre-Covid, securing tech financing was shooting fish in a barrel. People were throwing money at technology prospects like they’d watched Wolf of Wall Street backwards. Today’s landscape is very different. But even back then, while supply didn’t seem to be an issue, demand seemed to be lacking.</p>

<p>To be clear, I don’t think anybody thinks that these things are bad ideas. It’s just that the low barrier to entry I mentioned before is not the whole picture. In order to gain cheap access to interactive lessons, you first need to buy expensive hardware. In fact, these days companies like Meta are charging over the odds for their gear (compared to the value of the components, at least) because they are using some of that money to recoup the cost of the very expensive VR development. Like a lot of technology, we seem to be in that phase where only the rich can have access, while the market sorts itself out. Apple’s recently announced entrance into the foray of VR headsets, clocking in at $3,500, is certainly not doing anything to speed that process up. But, at some point, we may see cheaper hardware. Cheaper hardware would mean more people joining the ‘verse which means more demand, which encourages better supply, which means more people joining up, which means better supply, etc. etc. etc. You can by a flatscreen TV for a couple of hundred pounds now, where 10 years ago you’d need to add at least one zero. We don’t even call them “flatscreens” anymore, because that would be like pointing out they showed colour. My point is, technology usually gets cheaper.</p>

<p>For now though, it seems as though education isn’t the draw that we expected it to be. So what else might come to the metaverse’s rescue?</p>

<h2 id="the-future-of-remote-working">The future of remote working</h2>

<p>If you’ve seen anything about using VR headsets, you might have seen Meta’s Metaverse examples of the virtual boardroom, and cartoon-like avatars “doing business”. The idea is you slip on your headset and join a virtual board room. We have Zoom meetings now, but so much is lost in the simplification of that communication down to 2D. The theory is that by immersing yourself more completely in the experience, you’ll get back some of what you’re missing by not being face-to-face.</p>

<p>I think one of the reasons this is getting a lot of the press attention is that the technology is basically there - it’s just a matter of figuring out who wants it (read: who wants to pay for it). This is as compared to some of the other uses we’ll explore further down, which are still very much in development.</p>

<p>But its price that’s rearing it’s ugly head again. While theoretically VR meetings might be better than “traditional” video calling, the price jump involved in giving all your staff headsets, then upgrading their tech to handle the VR environment, then paying for the VR service, then all the training involved in new technology… it becomes very hard to justify the cost for the benefit of being able to more clearly see when someone sarcastically raises their eyebrows at your presentation.</p>

<p>So perhaps we need to look at another sector to bring the metaverse into sharper focus.</p>

<h2 id="gaming">Gaming</h2>

<p>When it comes to some of the underlying technology for the metaverse, this is probably where most of the foundational work has already been done. Much of the hardware we’re using in the space, and a good deal of the software used to create the worlds, comes from the gaming industry. Even looking at ways to interconnect different devices in one virtual world is something that multiplayer games of the more traditional variety have been deftly handling for decades.</p>

<p>Slight sidebar, but the e-Sports market is worth somewhere around the <a href="https://finance.yahoo.com/news/global-esports-market-report-2023-140800513.html">$1.2 billion mark</a>, and you better believe people want a slice of that.</p>

<p>But while we have multiplayer gaming - and lots of it - there is still a jump that has yet to be made. Today’s games are expensive to make, and comparatively risky endeavours when it comes to financing them. Without a big name franchise backing the move into metaverse / VR gaming - something like a Call of Duty, or a League of Legends - it’s hard to see this really taking off. Not even Minecraft, the most popular video game in history, has managed to make it’s VR flavour enticing enough to get people to invest in the platform. So far, the most likely candidate to break into this looks to be Epic Games’ Fortnite, which is leading the charge in VR Battle Royale. It’s a short jump over to a metaverse of its own - something that CEO Tim Sweeney has now confirmed the company is <a href="https://www.theverge.com/2023/3/23/23652928/tim-sweeney-interview-epic-games-fortnite-metaverse">actively gunning for</a>.</p>

<p>Of course, it’s all a big melting pot of different factors. Without the big player count already in the eco-system, the average gamer isn’t going to get enough FOMO to invest in the hardware. Without people chomping at the bit for a VR version of your game, you as the developer aren’t going to spend the exponential amount of money needed to turn your FPS or your top-down strategy into a VR environment. Without the investment from the big game houses, we might not see that needle shift.</p>

<p>So, while there looks like there’s progress in the gaming world, perhaps there is another sector that will get us to universal metaverse adoption quicker…</p>

<h2 id="e-commerce-and-banking">E-commerce and banking</h2>

<p>It shouldn’t be surprising that one of the big players in the metaverse space is expected to be e-commerce. On the old-school, boring, 2D internet that you’re on right now, over <a href="https://bloggingwizard.com/ecommerce-statistics/">26 million websites offer</a> e-commerce services.</p>

<p>It might not strike you as the most innovative of sectors. But the technology has come a long way from the early days of eBay in terms of getting you to part with your hard earned cash. As one example, anyone who has done a home renovation project recently may well have benefitted from Augmented Reality. The likes of Dulux will let you “paint” your living room from the viewscreen of your phone’s camera to make sure you get exactly the right colour in different lighting. A lot of furniture stores will also let you use Augmented Reality to place your new wardrobe or side table in the room to make sure it makes exactly the statement you want it to (and will also fit).</p>

<p>Work is already being done in the various flavours of the metaverse in terms of buying up virtual real estate within shopping districts. Yes, the various metaverses have already carved out areas specifically for you to shop. Among these metaverse options is “Decentraland”, which has been around in various forms since 2017. It’s only really in the last couple of years that the mainstream brands started to pay attention; the likes of Samsung, Adidas, and Miller Lite all bought property in Decentraland in late 2021 to early 2022. Not only that, but Decentraland has hosted events such as fashion shows attended by D&amp;G and Estee Lauder, and concerts by DeadMau5 and Grimes. You can take your avatar to these places and experience them like you would the real-world. In the case of shopping, your purchases in the virtual world can then appear on your real-world doorstep the very next day.</p>

<p>We’re a little way off this being the normal way to interact with brands, but big names are certainly backing the idea that this will happen sooner rather than later.</p>

<p>And of course, if you want to shop on the ‘verse, you’ll need to bank there as well. That’s the gamble that HSBC are taking. In 2022, they <a href="https://sandboxgame.medium.com/hsbc-to-become-the-first-global-financial-services-provider-to-enter-the-sandbox-c066e4f48163">purchased “land” in The Sandbox</a> - another flavour of metaverse - with the aim of serving customers following and participating in e-sports. Back over in Decentraland, JP Morgan Chase have setup a <a href="https://hypebeast.com/2022/2/jp-morgan-virtual-lounge-decentraland-first-bank-enter-metaverse">lobby in the main mall district</a>, offering customers information on the blockchain and other areas the bank in investing.</p>

<p>This is all very exciting stuff. But is this really all we’re using this technology for? Just to replicate the things we are doing now but in a computer simulation? Happily, no…</p>

<h2 id="more-niche-interests">More niche interests</h2>

<p>Remember way back up towards the top of this article, when we were talking about the idea of training people to be pilots without putting planes (and, by extension, people) at risk? Or how VR could be the silver bullet that education has been looking for? And then we spent a considerable amount of time talking about people playing games, and buying paint, and going into a bank branch?</p>

<p>Well let’s get back on track, shall we?</p>

<p>Siemens and NVIDIA have joined forces to create their “Industrial Metaverse”. This is “a virtual world [created] to solve real-world problems” (<a href="https://www.siemens.com/global/en/company/insights/siemens-and-nvidia-partner-to-build-the-industrial-metaverse.html">quote from Siemens’ website</a>). The idea is that real-world machinery will be plugged into a photo-realistic virtual space to allow anyone from anywhere in the world (presumably with a decent internet connection) to collaborate on projects and develop new engineering principles. It brings together all the best buzzwords and acronyms from technology over the last decade - AI, IoT solutions, VR, data-driven design, AR, metaverse, <strong><em>omniverse</em></strong>. For me, this is perhaps the most interesting use of the technology that is in active production at the moment.</p>

<p>But even with the exciting, there are still things to consider.</p>

<h2 id="security-implications">Security implications</h2>

<p>There are a lot of concerns about how to handle security across the Metaverse. A lot of these concerns stem from the whole “the metaverse isn’t really one thing” problem we spoke about up top. Why is that an issue? Well if you use the same password for your Facebook account and your online banking, and one of them is compromised, then there’s a higher chance that you’ll be hacked on the other. The same principle applies - weakness in the security of one place you access might well mean your security is weakened elsewhere.</p>

<p>Ok, so we’re talking about run of the mill online security considerations then? Well not really. Because of the way that the metaverse functions, and the by-its-very-nature invasiveness of the thing, there is more risk involved. To give one very simple example, if someone hacks into your work email tomorrow, they might be able to do a little damage pretending to be you as they email your boss. What they can’t do is pretend to be you on a Zoom call. With access to your metaverse account though (whatever that means - see the “the metaverse isn’t one thing” issue), the ways in which they could steal your identity multiply.</p>

<p>A lot of the benefits of the metaverse are in the fact that you can put more of yourself on the platform. More of yourself out there means more of you to steal, means a more attractive target for nefarious actors. To quote Vision in <em>Captain America: Civil War</em>, “our very existence invites challenge”.</p>

<p>Moreover, a lot of the experiences in the metaverse can be enhanced by putting more of yourself out there. Shopping for clothes becomes easier if your avatar is a photo-realistic version of you. But where does that stop? Will your retina scan be on there, available for people to use? What if we make the switch to metaverse doctors? Will you need to put your medical infomation on the system?</p>

<p>And beyond personal security, if Siemens and NVIDIA’s idea of the omniverse takes root - the ability to interact with the physical world from the virtual one - what risks are inherent in that?</p>

<p>Now, I’m not saying any of this to fearmonger. A lot of the same sort of concerns follow tech innovations wherever they go - from the very creation of the internet, to online banking, through to the objectively bizzare concept of calling a stranger on your phone and then getting in their car.</p>

<p>But data security is always something that worries tech professionals, and whatever form the metaverse takes, its ability to safetly and securely handle you is going to be paramount. Think about how long it took for most organisations to get a handle on GDPR - now imagine if GDPR had to account for the metaverse.</p>

<h2 id="the-law-in-the-metaverse">The law in the metaverse</h2>

<p>Quick hypothetical question for you: What happens if a crime is committed against you in the metaverse? What even would a crime in the metaverse look like? If I killed your avatar, is that ok because we’re basically in a game, or is that a crime because we’re in a replica of the real world?</p>

<p>While you’re pondering what a crime actually is, let’s have a think about how you would police that across a system of disconnected platforms. In the real world, we have the likes of Interpol to deal with specific and serious crimes that transcend borders. Would Interpol’s jurisdiction cover the various metaverses? Would a new organisation be required. How would you even get each metaverse to recognise the authority of such an entity?</p>

<p>Let’s take a different example. Let’s say you’re a content creator in Decentraland, and you make a thing that goes viral and makes you a decent amount of money. What if someone copies that thing in Decentraland, and recreates it in The Sandbox and profits from it. The patents and IP that are used to create the metaverse might well be protected in the real-world, but what about things that are created “down there”?</p>

<p>There are plenty of very smart people working on this kind of law as we speak, but the law is a slow and methodical tool that rarely moves quick enough to deal with technological change.</p>

<h2 id="final-thoughts">Final thoughts</h2>

<p>Right at the start, we asked what the metaverse was, and whether it will be worth it. That second part is a big question to answer - not least because, as you may have learned from this, we don’t really know what it is yet. We also don’t know what it’s going to cost us - either as individuals, or what we might need to provide as a collective.</p>

<p>There are a huge number of hurdles to overcome - technical, legal, and financial, not to mention some pretty meaty security implications.</p>

<p>But if all of those can work themselves out, we could be looking at the most disruptive technology the world has ever seen. When we iron this all out, and I’m optimistic that we will, we are looking at a huge leveller. High quality education, life-changing experiences, and the ability to interact and learn from each other like never before, could be accessible to everyone.</p>

<p>Will it be worth it? Time will tell, but I’m hopeful.</p>]]></content><author><name></name></author><category term="technology" /><category term="metaverse" /><category term="virtual reality" /><category term="long read" /><category term="featured" /><summary type="html"><![CDATA[Love it or hate it, there's lots to know about the metaverse. In this long read, I explore where the innovations are, and what to look out for.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://willrc.co.uk/assets/images/articles/vr-headset.jpg" /><media:content medium="image" url="https://willrc.co.uk/assets/images/articles/vr-headset.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">AI as a creative tool</title><link href="https://willrc.co.uk/articles/how-will-ai-help-or-hinder-songwriting/" rel="alternate" type="text/html" title="AI as a creative tool" /><published>2023-06-01T11:00:00+01:00</published><updated>2023-06-01T11:00:00+01:00</updated><id>https://willrc.co.uk/articles/how-will-ai-help-or-hinder-songwriting</id><content type="html" xml:base="https://willrc.co.uk/articles/how-will-ai-help-or-hinder-songwriting/"><![CDATA[<p><strong><em>It’s difficult to get me to shut-up about new tech, so to help channel that excitement I’ve asked people to give me specific tech questions they have. In this post, my friend Chris - drummer for the band <a href="https://linktr.ee/scrapband">scrap</a> - wanted to know whether the rise in AI could be a good thing or a bad thing for songwriters.</em></strong></p>

<p>Since the public launch of ChatGPT 6 months ago (yup, it really was only 6 months ago), it seems there’s nothing that “AI” can’t help us with. From <a href="https://www.washingtonpost.com/wellness/2023/05/02/chatgpt-ai-meal-planning-diet/">creating diet plans</a> to <a href="https://www.techradar.com/news/i-had-chatgpt-write-my-college-essay-and-now-im-ready-to-go-back-to-school-and-do-nothing">writing college essays</a>, and even <a href="https://www.explainthis.io/en/chatgpt/interview">helping with interview prep</a>, no realm is safe from computer incursion. And that’s just in the world of text-based responses. Platforms like Dall-E and others can use prompts to create images, and some have even started using AI to <a href="https://www.newyorker.com/culture/screening-room/an-ai-generated-film-depicts-human-loneliness-in-thank-you-for-not-answering">create films</a>.</p>

<p>Not even coders themselves are without competition. ChatGPT has even been used to create <a href="https://www.zdnet.com/article/i-asked-chatgpt-to-write-a-wordpress-plugin-i-needed-it-did-it-in-less-than-5-minutes/">basic WordPress plugins</a>, among other things.</p>

<p>But what about music? Can the latest in “AI” technology make a dent in the music business. Specifically, how can AI help or hinder songwriting?</p>

<h2 id="what-is-ai-or-more-specifically-what-is-chatgpt">What is AI? Or more specifically, what is ChatGPT?</h2>

<p>First, let’s take a look at what we mean by “AI”. While much song and dance was made about ChatGPT when it first hit the mainstream, it’s quickly become apparent that we’re still a few steps away from Skynet. There are plenty of super in-depth articles about the specifics of what we’ve come to call “AI”, but for our purposes the thing to understand is that, when you ask ChatGPT a question it’s primary aim is to give you an answer that sounds like a human being responded.</p>

<p>One of the downsides of this is that it’s actually not great at giving accurate answers. For example, I asked ChatGPT a few weeks ago to write me a short biography.</p>

<p><img src="https://willrc.co.uk/assets/images/articles/ai-songwriting/chatgpt-who-is-willrc.png" alt="Screenshot of me asking ChatGPT to write me a bio. It produced a very eloquent, but inaccurate, response. Response included a statement that I had worked for the Prince's Trust." /></p>

<p>A very clear and eloquent answer immediately presented itself. The only problem? Almost none of that is true. Even more worrying, when you try to query the answer itself, ChatGPT falls down a rabbit hole of gaslighting:</p>

<p><img src="https://willrc.co.uk/assets/images/articles/ai-songwriting/chatgpt-princes-trust-question.png" alt="Screenshot of me asking ChatGPT why it thought I worked at the Prince's Trust. It replied that it made no such claim." /></p>

<p>I have never worked at the Prince’s Trust, but I have mentored young people. It says as much in my LinkedIn profile, and so when ChatGPT found the words “mentoring” and “young people”, it’s predictive nature kicked in. You know what happens when you Google “mentoring young people”?</p>

<p><img src="https://willrc.co.uk/assets/images/articles/ai-songwriting/google-search-mentoring-young-people.png" alt="Google Search for &quot;mentoring young people&quot; where the top result is for The Prince's Trust." /></p>

<p>So all ChatGPT has done is tried to fill in gaps by predicting what the next part of the sentence should be, all with the lens of making sure that whatever the response is, it sounds like a real sentence.</p>

<h2 id="ok-so-chatgpt-might-not-always-be-accurate-but-does-that-matter-for-songwriting">Ok, so ChatGPT might not always be accurate, but does that matter for songwriting?</h2>

<p>While we know that ChatGPT isn’t the go-to for fact-checking, what we have learned is that it is great at putting words together in specific ways.</p>

<p>Structure, in fact, is one of the things ChatGPT is best at. So with the right parameters, it is a very powerful tool in a lot of ways. It’s great at organising data, and also understands how to put information into specific form factors. Let’s see what happens if we ask ChatGPT to write us a little ditty.</p>

<p><img src="https://willrc.co.uk/assets/images/articles/ai-songwriting/chatgpt-haiku-01.png" alt="Screenshot of a haiku generated by ChatGPT." /></p>

<p>Not great, perhaps. But not too bad as far as 5 seconds of work goes. Here is where it gets interesting though - one thing that sets apart ChatGPT from its predecessors is the ability for you to hold a dialogue with the platform. If you liked a particular part of this haiku, you can ask the bot to emphasis it in further iterations.</p>

<p><img src="https://willrc.co.uk/assets/images/articles/ai-songwriting/chatgpt-haiku-02.png" alt="Screenshot of ChatGPT revising the haiku based on feedback." /></p>

<p>And let’s go for one more revision.</p>

<p><img src="https://willrc.co.uk/assets/images/articles/ai-songwriting/chatgpt-haiku-03.png" alt="Screenshot of a further revision to the haiku based on further feedback." /></p>

<p>You get the idea. We’re probably not going to win any awards here. But the point is that you can go back and forth and make adjustments without having to do much actual thinking. Here I’ve used a haiku to keep it simple, but the software doesn’t care what type of song you want.</p>

<p><img src="https://willrc.co.uk/assets/images/articles/ai-songwriting/chatgpt-country-song.png" alt="Screenshot of ChatGPT creating a country and and western song about using ChatGPT to create music." /></p>

<p>You can even rip off existing songs, and rework them for your own purposes, if you’re so inclined. (And yes, I most definitely threw in a typo on purpose to demonstrate that the mighty ChatGPT can see through that…)</p>

<p><img src="https://willrc.co.uk/assets/images/articles/ai-songwriting/chatgpt-piano-man.png" alt="Screenshot of ChatGPT rewriting Billy Joel's &quot;Piano Man&quot;, but to be about ChatGPT." /></p>

<h2 id="looks-like-theres-nothing-it-cant-do-whats-the-downside">Looks like there’s nothing it can’t do. What’s the downside?</h2>

<p>There’s a couple of things to be aware of here. The first you’ve probably already spotted. It’s not very good. Now, you can fix that (to a point) with some back and forth, and a lot of tweaking and rewording of what you’re asking the system to do. The more you do that, perhaps the closer to a workable song you’ll get. If that’s the road you want to take though, at a certain point you’ve got to question how much time do you want to spend on guiding the AI vs doing your own thinking.</p>

<p>There is perhaps a wider concern though. While it is admittedly an over-simplification to keep referring to ChatGPT as a predictive text generator (and I’d definitely have made some very clever people angry if they read that), it is important to remember that AI-models are based on existing data. Vast amounts of it, to be sure, but finite amounts nonetheless. Beyond a certain point, everything that an AI like ChatGPT produces is a derivation of existing content. Of course, there are those that argue that all art is thus. We only have a finite number of words in the dictionary, after all. So how can you do anything in art without it being derivative. And while we’re staring down that train of thought, what’s the line between derivative and homage? Why is Andy Warhol considered an artist? What about Weird Al?</p>

<h2 id="so-is-that-a-yay-or-nay-for-ai-as-a-songwriting-tool">So is that a yay or nay for AI as a songwriting tool?</h2>

<p>I’m not a musician, but it strikes me that, as with a lot of technology, the answer to that question depends on how you use it.</p>

<p>ChatGPT has proven itself to be good at generating structure. It’s also got a keen virtual ear for rhyme and a reasonable one for meter. And, of course, it has access to basically every lyric in recorded history (<a href="https://help.openai.com/en/articles/6783457-what-is-chatgpt">pre 2021</a>). It can very much write you a song.</p>

<p>Indeed it has - and I don’t mean country music of dubious quality. A few months ago, a new collaboration between The Weeknd and Drake - <em>Heart On My Sleeve</em> - <a href="https://www.nytimes.com/2023/04/19/arts/music/ai-drake-the-weeknd-fake.html">went viral across</a> social media. Only, it wasn’t a collab at all. Various AI tools had been used - including a ChatGPT-esque platform to create the lyrics - in order to put together a song that sounded like a genuine article. While super fans might have been able to tell something was up, for most <em>Heart On My Sleeve</em> was a very passable track that could have been the real deal. From a lyrics point of view, AI was able to analyse existing tracks from both artists, and put together words that were in keeping with their style.</p>

<p>So perhaps it comes down to what you want. Ghostwriting in music has been around for about as long as we’ve had music. If you’re the kind of artist that uses a ghostwriter, should it make a difference to you whether the words you sing come from a human or a machine? If the quality is the same, would you even notice?</p>

<p>Or maybe you can use it as a “first draft” - a little kickstart for your inspiration before you build and make it your own.</p>

<p>Either way, one of the most important aspects is the prompt you give it. Just like our haiku example above, we can tweak and refine the output by iterating the prompt.</p>

<p>It is worth noting that, while I’ve focused here on ChatGPT (largely because it’s the most well known of the AI chatbots), it is not the only player in the space. ChatGPT has been specifically designed for a certain type of output - human-style conversation. But other services have been developed for more niche uses. While I’m not aware of any that have been designed especially for songwriting at the moment, the technology to do that does exist.</p>

<h2 id="but-its-not-just-about-creating-the-content">But it’s not just about creating the content…</h2>

<p>Despite the plethora of <a href="https://www.reuters.com/technology/chatgpt-launches-boom-ai-written-e-books-amazon-2023-02-21/">self-published AI-generated sci-fi</a> books flooding Amazon, I don’t think Neal Stephenson is losing out on sales. And on the flipside, there are many people who are making money now who weren’t before. Could this be one of those times where technology actually acts as a leveller of the field? Is it fair to say that more people are getting a bite of the cherry, without damaging the livelihoods of those already eating?</p>

<p>I’m not a musician, but I do have some experience with creating and marketing content. It strikes me that the creation of content is so rarely the problem. If anything, AI-assistance here may well help those who struggle in that area, but it isn’t going to be a game-changer to those already producing content. The problem most people face is in getting people to consume what they produce. <em>Heart On My Sleeve</em> didn’t go viral because it was an incredible song. It went viral because people thought they were listening to The Weeknd and Drake, and then stayed viral because of the novelty that they actually weren’t.</p>

<h2 id="final-thoughts">Final thoughts</h2>

<p>So to return to our question, will AI help or hinder songwriters? I think it has the power to do both. But, on balance, I think if used in the right way it could help. That is, after all, the point of technology. We just need to work out how best to use it.</p>

<p>The common theme throughout the examples we’ve looked at here is iteration. I don’t think we’re in danger of the music scene being overwhelmed with AI-generated music that puts songwriters out of business. I think that for largely the same reasons that I’m relatively sure my work as a developer is not going to be put in huge danger. AI can only take you so far. You need to understand what you’re putting into the system, and you need to be able to work with what that system spits out. Some of the grunt work can be done by the machines, but you still need someone at either end of the process who understands the fundamentals of the craft.</p>

<p>I’m a technology optimist. I’m not naïve to the concerns people have around AI, but as a tool to help us be better, I definitely think there’s a lot of exciting things happening.</p>]]></content><author><name></name></author><category term="technology" /><category term="ai" /><category term="chatGPT" /><category term="featured" /><summary type="html"><![CDATA[There's plenty about AI and ChatGPT in the news at the moment. Here I take a look at the potential for some more creative uses.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://willrc.co.uk/assets/images/articles/dj-decks.jpg" /><media:content medium="image" url="https://willrc.co.uk/assets/images/articles/dj-decks.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">I can’t convert miles to kilometers in my head (and I think I’m ok with that)</title><link href="https://willrc.co.uk/articles/i-cant-convert-miles-to-kilometers-in-my-head/" rel="alternate" type="text/html" title="I can’t convert miles to kilometers in my head (and I think I’m ok with that)" /><published>2023-02-28T10:00:00+00:00</published><updated>2023-02-28T10:00:00+00:00</updated><id>https://willrc.co.uk/articles/i-cant-convert-miles-to-kilometers-in-my-head</id><content type="html" xml:base="https://willrc.co.uk/articles/i-cant-convert-miles-to-kilometers-in-my-head/"><![CDATA[<p>It’s not exactly a secret that we live in a world that relies heavily on technology. From an increasing need to own a smartphone to do any kind of existing in 21st Century life, to the modern convenience of online shopping, there are few things that we do that don’t rely on tech.</p>

<p>One of these tech-free solaces, you might think, is the simple act of going for a walk. But for many of us (myself included) tech is snaking it’s tendrils into that as well. I wear a Fitbit pretty much constantly, and so when I take the dog for a walk in the morning, I know exactly how many steps I’ve done, and what distance I’ve travelled. As a UK-raised millennial, despite the obvious benefits of the metric system, I’m still conditioned to think about distances in miles. But when asked how far I’ve walked in a day, I feel like I should answer in kilometers. It’s 2023 and I really should have fully embraced metric by now (as I was saying to my 5’11” friend over a couple of pints the other day).</p>

<p>Here’s the thing though: gun to my head, I could not tell you how many miles go into a kilometer. Or is it kilometers into a mile? I genuinely don’t have that information in my brain. I’ve looked it up, countless times. But I just seem incapable of retaining that information. I think there’s a 7 involved?</p>

<p>The reason is that I know I can just ask my phone to do it. “Hey Google - what’s 5 miles in kilometers?” Ah - it’s 8.4km. Great stuff. I immediately no longer need that information.</p>

<p>I’m not alone in this. A <a href="https://www.science.org/doi/10.1126/science.1207745">2011 Science paper</a> showed that the advent of search engines has genuinely affected the way our brains function. To lift from a summary of the paper by <a href="https://arstechnica.com/science/2011/07/study-why-bother-to-remember-when-you-can-just-use-google/">Ars Technica</a>, in general people who regularly use the internet are weaker at recalling information, and instead remember where they can go to retrieve that information.</p>

<h2 id="is-this-a-bad-thing">Is this a bad thing?</h2>

<p>I think it depends on your point of view. It’s probably not great that I have such a heavy reliance on my phone’s calendar (for example), but the research suggests that what this means is that our brains are becoming more efficient at processing information. From a bio-chemistry point of view, this shift means our brains have increased activity in the prefrontal cortex, which is involved in decision-making and “working memory” (as opposed to long-term memory). Any job that requires problem solving, decision-making, or the learning and application of complex concepts benefits from a strong prefrontal cortex.</p>

<p>The theory is that the more of this kind of thing I outsource, the more brain space I have for creative work. So far though, I’m yet to paint a Louvre-worthy masterpiece. That said, I do see it in other ways - for example when I code. I’m very rarely able to just open up an IDE and bash out dozens of lines off the top of my head. It involves a lot of Googling and referencing manuals - so much so that I’d worry I was a fraud, were it not such a common trope among developers. The skill in coding is not about memorising what every function does. It’s about understanding what is possible with any given language, and determining the best route to your answer.</p>

<h2 id="great-so-its-all-sunshine-and-rainbows">Great, so its all sunshine and rainbows?</h2>

<p>There are a number of skills that we’re slowly losing because we believe we can rely on technology to fill its place. One example is map-reading. You can argue whether this is really a loss, or it’s an evolution, but the fact is that people regularly <a href="https://www.mirror.co.uk/news/uk-news/mountain-hiker-gets-lost-22-29294659">get lost on hikes</a> because they either don’t take with them, or don’t know how to read, paper maps. Phones make for a decent guide in cities, are basically as good as high-end satnavs, but can become next to useless on hikes for any number of reasons including: battery dying, GPS signal not being accurate enough, no internet connection, or the temperature being so low that the phone doesn’t recognise your finger.</p>

<p>There is also a potential whole separate post to discuss what technology does to attention spans. Including the idea that one of the reasons long-term memory is taking a hit is because we aren’t holding information in our short-term memory long enough for it to make the jump (A-level Psychology coming in clutch here…).</p>

<p>There are other things that require strong long-term memory. Professions like Law, Medicine, and Academia require the recall of large amounts of often complex information. In many cases, simply being able to know exactly what to Google isn’t going to cut it.</p>

<h2 id="so-i-should-throw-out-my-smartphone">So I should throw out my smartphone?</h2>

<p>Well, no, melodramatic hypothetical reader, keep it around. For starters, you have the world’s knowledge at your fingertips, from the largest encyclopedia ever created, to humble one-man tech-focused blogs.</p>

<p>But I do think it’s important to understand how a reliance on technology can change the way you perceive and interact with the world around you. For me, it comes out in a number of other ways - for example I <strong><em>need</em></strong> events and appointments to be in my calendar, or they simply don’t exist to me. I’ve become a pretty good project manager in my career, but I rely on a robust system of time-blocking and to-do lists to function. None of this is bad, but if I didn’t acknowledge it and adapt my behaviour accordingly, it could have quite the negative impact on my life.</p>

<p>Learn how your dependence on technology is affecting you, I guess is my point.</p>

<p>I’m probably still not going to remember how many miles are in a kilometer though…</p>]]></content><author><name></name></author><category term="technology" /><summary type="html"><![CDATA[There's lots of mental tasks we can outsource to technology now. But should we? And how does doing that affect us?]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://willrc.co.uk/assets/images/articles/thinking-emoji.jpg" /><media:content medium="image" url="https://willrc.co.uk/assets/images/articles/thinking-emoji.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Shared Hosting vs Cloud Hosting vs Virtual Private Servers</title><link href="https://willrc.co.uk/articles/shared-hosting-and-other-options/" rel="alternate" type="text/html" title="Shared Hosting vs Cloud Hosting vs Virtual Private Servers" /><published>2022-12-13T10:00:00+00:00</published><updated>2022-12-13T10:00:00+00:00</updated><id>https://willrc.co.uk/articles/shared-hosting-and-other-options</id><content type="html" xml:base="https://willrc.co.uk/articles/shared-hosting-and-other-options/"><![CDATA[<h2 id="lets-start-with-shared-hosting-what-is-it">Let’s start with Shared Hosting… what is it?</h2>

<p>Think of renting a flat in an apartment complex. You get in the building, and have access to your front door. You can invite in whoever you like, put in whatever furniture you want, and in this case the landlord super generous, so you can even paint the walls whatever colour suits you. Shared Hosting is a little like this. What you are getting is space on a company’s server to host your website. Within that space, you can do more or less as you please.</p>

<p>It’s a great solution for a lot of websites, at a comparatively low cost (the flat analogy can only take us so far).</p>

<p>But there are some limitations. As a tenant of a shared hosting provider, you don’t have access to the underlying configuration of the server. Often, that isn’t a deal breaker. In fact, if you’re not sure why you would need access to the underlying configuration, then you probably don’t need it - most people don’t. Some sites however need a little more, and Shared Hosting can limit your use of some of the more flashy and modern programming languages.</p>

<p>Perhaps more commonly felt is the limitation of shared resources. Back to our flat analogy, and imagine your neighbour is throwing a big house party with lights and smoke machines, and a great sound system, and they accidentally trip the power to the whole building. Or maybe it’s as simple as all of their guests take up all the parking outside the building and your guests can’t get in. In a similar way, if another tenant on your shared hosting has a massive traffic spike, or does something to take up more than expected resources, there is a chance that your website might temporarily suffer.</p>

<h2 id="well-that-sounds-fair-enough-but-are-there-security-implications-to-shared-vs-the-others">Well that sounds fair enough, but are there security implications to shared vs the others?</h2>

<p>The short answer is “yes”. Thinking back to our flat analogy, if someone breaks into your neighbour’s flat, they may well find it easier to get into yours. In most cases, there is nothing “physically” separating your website from another tenants. 90% of the time this may not matter, but if someone can break into the main building, then your front door might be less of a challenge.</p>

<p>In reality, this is a slight oversimplification. For one thing, just as you have a lock on the front door of both the apartment block, and your own flat, so too can you have security on both the server and your individual website. In fact, most shared hosting providers now make a point of explaining the firewalls and DDoS protection that they put in place at a tenant level as well as on their servers as a whole. Even if they don’t advertise this, there are ways of securing your individual website - just as you might put a deadbolt on your front door.</p>

<h2 id="ok-but-what-are-my-other-options">Ok, but what are my other options?</h2>

<p>Traditionally, your options were Shared Hosting, or something called a Virtual Private Server - or VPS. Slightly more recently, a third option - Cloud Hosting - has sprung up. There are differences between VPS and Cloud Hosting, but for most of the rest of this article, I’m going to lump them together. My reasoning for this is that, for the average user, the pros and cons of VPS and Cloud when compared to Shared Hosting are the same. If you do want to go down either of these routes though, <a href="mailto:will@willrc.co.uk">do get in touch</a> to see if there’s more you might want to discuss.</p>

<p>The main difference with VPS/Cloud is that, rather than taking up a portion of a server that’s shared with other tenants, you get your very own set of resources. One major benefit of this is that you don’t have to worry about next door’s house party - because there isn’t a next door. Cloud Hosting in particular is great for sites that have spikes of traffic - for example if you’re running a seasonal e-commerce business, you may need more resource at certain times of the year. Cloud plans can enable you to pay for only what you need on any given month, and they can scale up or down as needed.</p>

<p>Cloud and VPS also (in most cases) give you much more control over the underlying server than Shared Hosting. In practice, this means there isn’t a limit to the kind of website you can create. If you want to develop your own web app for something, Shared Hosting is not likely to be the right call for you. Cloud and VPS on the other hand will give you that flexibility.</p>

<p>Finally, another benefit of Cloud Hosting specifically, is that in the event of a hardware failure of the hosting provider itself, your site is transferred over to another instance immediately, meaning that Cloud Hosting offers much better uptime/downtime statistics than other hosting options.</p>

<h2 id="great---these-sound-way-better-why-dont-we-all-do-this">Great - these sound way better. Why don’t we all do this?</h2>

<p>Well there are a few reasons. The first, and most immediately obvious, is cost. VPS and Cloud are almost always more expensive than the equivalent package as a shared hosting option. Sometimes by orders of magnitude.</p>

<p>The other thing to consider is that - particularly for VPS - you’re responsible for all the updating, security patching, and general upkeep of the server. This is more than just ensuring your WordPress is up to date - this is making sure the underlying system functioning as it needs to. In most cases, there is a relatively high level of technical understanding needed to do this.</p>

<p>One other thing to consider, is that all of the performance benefits are only really going to be seen if you are bringing in significant amounts of traffic. For most smaller organisations, individual blog sites, or sites without a huge amount of interactive features, hosting it on a shared plan or on a VPS isn’t likely to be the thing that makes the difference in page speed.</p>

<p>In short, for a lot of websites - and particular those of smaller organisations - VPS or Cloud is just overkill. The on-paper benefits you gain are not likely to be realised, whereas the cost and technical debt accrued will be.</p>

<h2 id="are-these-my-only-options">Are these my only options?</h2>

<p>Absolutely not! There are almost as many hosting options out there as there are types of website. I work with a lot of clients using WordPress as their platform of choice. <strong>Managed WordPress Hosting.</strong>, typically a type of Shared Hosting, is another option I invite some to consider.</p>

<p>Typically more expensive than shared hosting, it offers two main benefits. One is that it circumvents some of the drawbacks of generic shared hosting, by optimising performance for WordPress (where ‘regular’ shared hosting has to account for a wider range of needs). It also takes care of the core and plugin updates for you, and most offer automated backup and restore solutions either as part of the plan or for a small extra fee.</p>

<h2 id="so-what-should-i-do">So, what should I do?</h2>

<p>If you’re a small organisation, an individual running a portfolio site, and/or your website is mostly just for information (perhaps with a small online shop), then Shared Hosting is probably the way to go. It’s relatively cheap, requires less technical knowledge to maintain, and the drawbacks can be accounted for in other ways (such as increasing security on a WordPress site by added a firewall plugin).</p>

<p>If on the other hand, you’re looking to scale quickly, use the very latest in web technology, and/or are looking to run a robust e-commerce platform, you may want to consider Cloud Hosting, or even a VPS.</p>

<p>Either way, if you want to chat more about this, feel free to reach out to me on <a href="https://twitter.com/willranjhill">Twitter</a>, or <a href="mailto:will@willrc.co.uk">via email</a>.</p>

<p>Happy hosting!</p>]]></content><author><name></name></author><category term="communication" /><category term="web hosting" /><summary type="html"><![CDATA[There are many ways you can host your website online. Here we walk through some of the options.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://willrc.co.uk/assets/images/articles/webdev.jpg" /><media:content medium="image" url="https://willrc.co.uk/assets/images/articles/webdev.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">9 ball problem - Solving a logic puzzle with Javascript</title><link href="https://willrc.co.uk/articles/9-ball-problem-logic-puzzle/" rel="alternate" type="text/html" title="9 ball problem - Solving a logic puzzle with Javascript" /><published>2022-11-24T10:00:00+00:00</published><updated>2022-11-24T10:00:00+00:00</updated><id>https://willrc.co.uk/articles/9-ball-problem-logic-puzzle</id><content type="html" xml:base="https://willrc.co.uk/articles/9-ball-problem-logic-puzzle/"><![CDATA[<p>It’s been a while since I’ve done coding for the fun of it, so I thought I’d get back into the game, and bring you along for the ride. There isn’t really a point to these, except to show some of the practical (and non-practical) uses for actual coding.</p>

<p><a href="https://willrc.co.uk/articles/counterfeit-coins-logic-puzzle/">Last time round</a>, I looked at the classic “Counterfeit Coins” problem. In this post, I’m going back to the world of weight-based logic problems for another classic: quality controlling balls.</p>

<p>The logic puzzle in question is the following:</p>

<blockquote>
  <p>You have 9 seemingly identical balls. They are all the same size and shape, however one of them is heavier than the others. You have a pair of balance scales that you can only use twice, and you have no counterweights. How do you determine which is the erroneous ball?</p>
</blockquote>

<p>Let’s get to work.</p>

<h2 id="addressing-the-logic">Addressing the logic</h2>

<p>Before we jump into the coding, let’s think through the logic of this. We can only use the scales twice, and we have no counterweights. So logically the only thing we can do is weigh a subset of the balls against another subset. We can do this only twice, so a “brute force” approach of just weighing everything isn’t possible.</p>

<p>9 is an interesting number though, and that gives us somewhere to start. Let’s split our balls up into three sets of three. To do that, we’re going to create three arrays, and give each ball an arbitrary weight of 5 units, with the exception of the rogue ball, which can be 6 units. We’re aiming for a proof of concept here, so it doesn’t matter that we know the rogue ball.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nx">group_one</span> <span class="o">=</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">5</span><span class="p">];</span>
<span class="nx">group_two</span> <span class="o">=</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">5</span><span class="p">];</span>
<span class="nx">group_three</span> <span class="o">=</span> <span class="p">[</span><span class="mi">6</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">5</span><span class="p">];</span>

</code></pre></div></div>

<p>Ok, so now lets do the only thing available to us. Let’s weigh two of these groups against each other. We know that one of three outcomes is going to happen, and that gives us a good start:</p>

<ol>
  <li><strong>Both groups will weigh the same.</strong> If that happens, then we know that the rogue ball is in the third group.</li>
  <li><strong>Group 1 weighs more than Group 2.</strong> If that happens, we know that the rogue ball is in the first group.</li>
  <li><strong>Group 1 weighs less than Group 2.</strong> If that happens, we know that the rogue ball is in the second group.</li>
</ol>

<h2 id="creating-our-scales">Creating our scales</h2>

<p>To do this, we need to know the total weight of each array, compare them, and then instruct our script what to do with each scenario. That’s a lot to conceptualise at once, so let’s start with the basics. We’re going to create our scales as a function, taking two inputs and comparing them. We need to know what the outcome is, so we’ll tell the scales to return one of 3 values based on which is heavier.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kd">function</span> <span class="nx">balance_scales</span><span class="p">(</span> <span class="nx">one</span><span class="p">,</span> <span class="nx">two</span> <span class="p">){</span>

    <span class="kd">let</span> <span class="nx">sum_one</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">const</span> <span class="nx">value</span> <span class="k">of</span> <span class="nx">one</span><span class="p">){</span>
        <span class="nx">sum_one</span> <span class="o">+=</span> <span class="nx">value</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="kd">let</span> <span class="nx">sum_two</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">const</span> <span class="nx">value</span> <span class="k">of</span> <span class="nx">two</span><span class="p">){</span>
        <span class="nx">sum_two</span> <span class="o">+=</span> <span class="nx">value</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">if</span><span class="p">(</span> <span class="nx">sum_one</span> <span class="o">==</span> <span class="nx">sum_two</span> <span class="p">){</span>
        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span> <span class="nx">sum_one</span> <span class="o">&gt;</span> <span class="nx">sum_two</span> <span class="p">){</span>
        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span> <span class="nx">sum_one</span> <span class="o">&lt;</span> <span class="nx">sum_two</span> <span class="p">){</span>
        <span class="k">return</span> <span class="mi">2</span><span class="p">;</span>
    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
        <span class="k">return</span> <span class="mi">999</span><span class="p">;</span>
    <span class="p">}</span>

<span class="p">}</span>

</code></pre></div></div>

<p>For those who read the <a href="https://willrc.co.uk/articles/counterfeit-coins-logic-puzzle/">Counterfeit Coins post</a> you might recognise this as an adaptation of our scales function from last time. To walk through it section by section, we’re taking the first inputted array (or <code class="language-plaintext highlighter-rouge">one</code> as the function understands it) iterating through it to find the total value, summing as we go. Then it does the same for the second inputted array (<code class="language-plaintext highlighter-rouge">two</code> as the function understands it). Finally, it compares the two values (<code class="language-plaintext highlighter-rouge">sum_one</code> and <code class="language-plaintext highlighter-rouge">sum_two</code>) and does one of 3 things:</p>

<ol>
  <li>If the values are the same - meaning that the groups weigh the same - it gives us a value of <code class="language-plaintext highlighter-rouge">0</code>.</li>
  <li>If the first array has a higher value than the second array - meaning that the first group weighs more than the second - it gives a value of <code class="language-plaintext highlighter-rouge">1</code>.</li>
  <li>If the first array has a lower value than the second array - meaning that the first group weighs less than the second - it gives a value of <code class="language-plaintext highlighter-rouge">2</code>.</li>
</ol>

<p>The observant of you will notice I lied. This function actually does one of 4 things. The final condition - captured by the <code class="language-plaintext highlighter-rouge">else</code> parameter, gives a value of 999. This is a little flag I’ve put in for myself to test if the code is working. If/else if statements work well in smaller scenarios like this where you can be reasonably confident that you’ve thought through all the outcomes. But code will do <em>exactly</em> what you tell it to, nothing more and nothing less. If there was an outcome that we hadn’t anticipated, and we didn’t tell the code what to do with that outcome, it won’t do anything. At best this will leave you with no output, at worst it could break your code completely. Here the <code class="language-plaintext highlighter-rouge">else</code> parameter - with no additional “if” stipulations - captures all the other eventualities and outputs a number so high that we as the end user will know something is wrong. It’s not really necessary in this code, but it’s a habit I got into when I was self-teaching, and I’ve stuck with it.</p>

<p>Anyway! We have our scales. If we wanted to, we can test them just by putting in different numbers and seeing what comes out</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="nx">balance_scales</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span> <span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="nx">balance_scales</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span> <span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="nx">balance_scales</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span> <span class="p">);</span>

<span class="c1">// This should output, respectively: 1, 0, 2</span>

</code></pre></div></div>

<h2 id="weigh-in-the-first">Weigh-in the first</h2>

<p>We have everything we need for our first weigh-in. All we need to do is construct the logic around it. What we haven’t thought through yet is what happens after we know which of the groups the rogue ball is in, so for now we’ll just output some text to the console to show us the code works as expected. And to make this neat we’ll call the scales function and store it in a variable, and wrap the whole thing in a function of its own.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kd">function</span> <span class="nx">first_weigh</span><span class="p">(){</span>

    <span class="kd">let</span> <span class="nx">scales_result</span> <span class="o">=</span> <span class="nx">balance_scales</span><span class="p">(</span> <span class="nx">group_one</span><span class="p">,</span> <span class="nx">group_two</span> <span class="p">);</span>

    <span class="k">if</span><span class="p">(</span> <span class="nx">scales_result</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">){</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">we know the ball is in group 3</span><span class="dl">"</span><span class="p">);</span>
    <span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span> <span class="nx">scales_result</span> <span class="o">==</span> <span class="mi">1</span> <span class="p">){</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">we know the ball is in group 1</span><span class="dl">"</span><span class="p">);</span>
    <span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span> <span class="nx">scales_result</span> <span class="o">==</span> <span class="mi">2</span> <span class="p">){</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">we know the ball is in group 2</span><span class="dl">"</span><span class="p">);</span>
    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">something else has gone wrong</span><span class="dl">"</span><span class="p">);</span>
    <span class="p">}</span>

<span class="p">}</span>

</code></pre></div></div>

<p>So, because we know that the faulty ball is in group three, and therefore groups one and two weigh the same, the console should give us the message “we know the ball is in group 3”.</p>

<h2 id="weigh-in-the-second">Weigh-in the second</h2>

<p>So, we have the group, but not the specific ball. The good news is that because the groups only contain three balls each, we can use the same thought process to solve this. In the second weigh in, we only need to weigh two of the balls against each other. If they’re the same weight then the rogue ball is the one we didn’t weigh. Otherwise, it’s whichever one is heavier.</p>

<p>In a stroke of luck / genius, because we’ve captured the weights of the balls in the arrays, we actually don’t need our fancy JS Scales of Justice (patent-pending) for the second weigh-in. We can just compare the values of the balls we want to weigh. Again, for now, let’s spit out the result to the console.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kd">function</span> <span class="nx">second_weigh</span><span class="p">(</span> <span class="nx">chosen_array</span> <span class="p">){</span>

    <span class="k">if</span><span class="p">(</span> <span class="nx">chosen_array</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="nx">chosen_array</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="p">){</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">ball 3 is the rogue ball</span><span class="dl">"</span><span class="p">);</span>
    <span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span> <span class="nx">chosen_array</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&gt;</span> <span class="nx">chosen_array</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="p">){</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">ball 1 is the rogue ball</span><span class="dl">"</span><span class="p">);</span>
    <span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span> <span class="nx">chosen_array</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;</span> <span class="nx">chosen_array</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="p">){</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">ball 2 is the rogue ball</span><span class="dl">"</span><span class="p">);</span>
    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">something else has gone wrong</span><span class="dl">"</span><span class="p">);</span>
    <span class="p">}</span>

<span class="p">}</span>

</code></pre></div></div>

<p>Because we’re proof-of-concepting, we know that ball 1 is the rogue one, and the output to the console confirms this.</p>

<h2 id="bringing-it-all-together">Bringing it all together</h2>

<p>So, we have arrived at our answer. Now we need to put this all together. Specifically, we need the script to call our second weighing function after it determines the first. And, at the end of it all, we want the result to be displayed on the page so we don’t have to follow the console. To do that last bit, we’re just going to create a string that we will append information to as the script runs.</p>

<p>Here’s what it looks like.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="c1">// start the output string</span>
<span class="kd">var</span> <span class="nx">script_output</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">The heavy ball is </span><span class="dl">"</span><span class="p">;</span>

<span class="c1">// create the balls and put them into groups</span>
<span class="nx">group_one</span> <span class="o">=</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">5</span><span class="p">];</span>
<span class="nx">group_two</span> <span class="o">=</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">5</span><span class="p">];</span>
<span class="nx">group_three</span> <span class="o">=</span> <span class="p">[</span><span class="mi">6</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">5</span><span class="p">];</span>

<span class="c1">// build our scales function</span>
<span class="kd">function</span> <span class="nx">balance_scales</span><span class="p">(</span> <span class="nx">one</span><span class="p">,</span> <span class="nx">two</span> <span class="p">){</span>

    <span class="kd">let</span> <span class="nx">sum_one</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">const</span> <span class="nx">value</span> <span class="k">of</span> <span class="nx">one</span><span class="p">){</span>
        <span class="nx">sum_one</span> <span class="o">+=</span> <span class="nx">value</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="kd">let</span> <span class="nx">sum_two</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">const</span> <span class="nx">value</span> <span class="k">of</span> <span class="nx">two</span><span class="p">){</span>
        <span class="nx">sum_two</span> <span class="o">+=</span> <span class="nx">value</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">if</span><span class="p">(</span> <span class="nx">sum_one</span> <span class="o">==</span> <span class="nx">sum_two</span> <span class="p">){</span>
        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span> <span class="nx">sum_one</span> <span class="o">&gt;</span> <span class="nx">sum_two</span> <span class="p">){</span>
        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span> <span class="nx">sum_one</span> <span class="o">&lt;</span> <span class="nx">sum_two</span> <span class="p">){</span>
        <span class="k">return</span> <span class="mi">2</span><span class="p">;</span>
    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
        <span class="k">return</span> <span class="mi">999</span><span class="p">;</span>
    <span class="p">}</span>

<span class="p">}</span>

<span class="c1">// build the first weigh function</span>
<span class="kd">function</span> <span class="nx">first_weigh</span><span class="p">(){</span>

    <span class="kd">let</span> <span class="nx">scales_result</span> <span class="o">=</span> <span class="nx">balance_scales</span><span class="p">(</span> <span class="nx">group_one</span><span class="p">,</span> <span class="nx">group_two</span> <span class="p">);</span>

    <span class="k">if</span><span class="p">(</span> <span class="nx">scales_result</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">){</span>
        <span class="nx">script_output</span> <span class="o">+=</span> <span class="dl">"</span><span class="s2">Group 3 </span><span class="dl">"</span><span class="p">;</span>
        <span class="nx">second_weigh</span><span class="p">(</span> <span class="nx">group_three</span> <span class="p">);</span>
    <span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span> <span class="nx">scales_result</span> <span class="o">==</span> <span class="mi">1</span> <span class="p">){</span>
        <span class="nx">script_output</span> <span class="o">+=</span> <span class="dl">"</span><span class="s2">Group 1 </span><span class="dl">"</span><span class="p">;</span>
        <span class="nx">second_weigh</span><span class="p">(</span> <span class="nx">group_one</span> <span class="p">);</span>
    <span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span> <span class="nx">scales_result</span> <span class="o">==</span> <span class="mi">2</span> <span class="p">){</span>
        <span class="nx">script_output</span> <span class="o">+=</span> <span class="dl">"</span><span class="s2">Group 2 </span><span class="dl">"</span><span class="p">;</span>
        <span class="nx">second_weigh</span><span class="p">(</span> <span class="nx">group_two</span> <span class="p">);</span>
    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">something went wrong with the first weigh</span><span class="dl">"</span><span class="p">);</span>
    <span class="p">}</span>

<span class="p">}</span>

<span class="c1">// build the second weigh function</span>
<span class="kd">function</span> <span class="nx">second_weigh</span><span class="p">(</span> <span class="nx">chosen_array</span> <span class="p">){</span>

    <span class="k">if</span><span class="p">(</span> <span class="nx">chosen_array</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="nx">chosen_array</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="p">){</span>
        <span class="nx">script_output</span> <span class="o">+=</span> <span class="dl">"</span><span class="s2">Ball 3 </span><span class="dl">"</span><span class="p">;</span>
    <span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span> <span class="nx">chosen_array</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&gt;</span> <span class="nx">chosen_array</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="p">){</span>
        <span class="nx">script_output</span> <span class="o">+=</span> <span class="dl">"</span><span class="s2">Ball 1 </span><span class="dl">"</span><span class="p">;</span>
    <span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span> <span class="nx">chosen_array</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;</span> <span class="nx">chosen_array</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="p">){</span>
        <span class="nx">script_output</span> <span class="o">+=</span> <span class="dl">"</span><span class="s2">Ball 2 </span><span class="dl">"</span><span class="p">;</span>
    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">something went wrong with the second weigh</span><span class="dl">"</span><span class="p">);</span>
    <span class="p">}</span>

<span class="p">}</span>

<span class="c1">// finally, call the first weighing function, and then display the output on the page</span>
<span class="nx">first_weigh</span><span class="p">(</span> <span class="nx">group_one</span><span class="p">,</span> <span class="nx">group_two</span> <span class="p">);</span>
<span class="nb">document</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span> <span class="nx">script_output</span> <span class="p">);</span>

</code></pre></div></div>

<h2 id="variations-on-a-theme">Variations on a theme</h2>

<h3 id="what-if-there-are-only-8-balls">What if there are only 8 balls</h3>

<p>This works just as well. From a thought-process point of view, you still split the balls into three groups - this time two groups of three and a group of two. You weigh the groups of three against each other and then carry on as planned. From a coding point of view, you don’t actually have to change anything, as the code never interacts with the third ball of the third group.</p>

<h3 id="what-if-the-rogue-ball-is-lighter">What if the rogue ball is lighter?</h3>

<p>All the logic still holds - we’re looking for the outliers in all cases. All we need to do in this case is swap the more than <code class="language-plaintext highlighter-rouge">&gt;</code> and less than <code class="language-plaintext highlighter-rouge">&lt;</code> symbols throughout.</p>

<h2 id="final-thoughts">Final Thoughts</h2>

<p>Much like with our Counterfeit Coins puzzle, it might seem like a pointless exercise because we know the answer going in. I find these exercises helpful though for a number of reasons. Chief among them is the constant reminder that even when you know the answer going in, it’s never as straightforward as just coding it out. You need to understand the logic that goes into it, and be able to deal with those unexpected things that happen because you’ve made a little mistake somewhere.</p>]]></content><author><name></name></author><category term="logic puzzle" /><category term="javascript" /><category term="problem solving" /><category term="featured" /><summary type="html"><![CDATA[Carrying on with my 'coding for the fun of it' series, I'm looking at a classic logic problem, and seeing whether we can write code to solve it.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://willrc.co.uk/assets/images/articles/code.jpg" /><media:content medium="image" url="https://willrc.co.uk/assets/images/articles/code.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Mastodon and Twitter: Which one is better?</title><link href="https://willrc.co.uk/articles/mastodon-vs-twitter/" rel="alternate" type="text/html" title="Mastodon and Twitter: Which one is better?" /><published>2022-11-10T08:00:00+00:00</published><updated>2022-11-10T08:00:00+00:00</updated><id>https://willrc.co.uk/articles/mastodon-vs-twitter</id><content type="html" xml:base="https://willrc.co.uk/articles/mastodon-vs-twitter/"><![CDATA[<p>A week or so ago, I posted that <a href="https://willrc.co.uk/musings/yes-im-on-mastodon-now-too/">I had joined Mastodon</a>. In it, I very wisely decided to not comment on a platform that I didn’t know a huge amount about. Here, I ignore my own sound advice.</p>

<h2 id="what-is-the-fediverse-and-what-is-mastodon">What is the Fediverse and what is Mastodon?</h2>

<p>Other people cover this very well, including <a href="https://blog.djnavarro.net/posts/2022-11-03_what-i-know-about-mastodon/">this epicly detailed post</a> from Danielle Navarro, but for a quick run through here is what you need to know:</p>

<ul>
  <li>The Fediverse (or Federated Universe) is a catch-all term for a series of platforms that all share the same protocol. This allows users on one instance to communicate with users on other instances basically seamlessly. Imagine if you could read and comment on your aunty’s Facebook post from your Pinterest account. It’s a little like that. Sort of.</li>
  <li>Mastodon is one of the more popular uses of the Fediverse. If you like bad analogies, it’s a Twitter-clone. In actuality, it’s a microblogging platform that allows users to join one of hundreds of servers, based on their personal / professional interests, and each governed by its own set of policies.</li>
  <li>Joining one server does not stop you from following people on other servers and interacting with them.</li>
</ul>

<h2 id="sounds-great-why-arent-we-all-doing-this">Sound’s great. Why aren’t we all doing this?</h2>

<p>Great question, hypothetical reader! It looks like there are a few reasons. Conceptually it’s a little tricky for some to understand - the reasons why might become clear in a moment.</p>

<p>I think there’s also a marketing issue - people often refer to “Mastodon” being difficult to set up, or having a wait list to join. It’s like saying email is difficult - an email <em>provider</em> might be difficult, in the same way a Mastodon server might be difficult. But one person’s experience of a particular server might lead them to think Mastodon is not worth the effort, whilst someone else remains unaware and unaffected on an entirely different server.</p>

<p>That does lead onto a related issue though, which is that there is a higher barrier to entry to “Mastodon” - precisely because you can’t “join Mastodon” in the same way you join Twitter or Instagram. You have to pick a server, and even if you accept that there is still the fear that you might miss something by joining the “wrong” server.</p>

<p>Lastly, because of the federated nature, it does take time and effort to curate your list of followed accounts across various servers. Again, precisely because of the federated nature of the platform there are certain hoops to jump through that just aren’t there with some other platforms.</p>

<h2 id="so-twitter-is-better-then-or-at-least-easier-to-use">So Twitter is better then? Or at least easier to use?</h2>

<p>There are things I still really like about Twitter. I’ve been on the platform (in various levels of engagement) for over 12 years, and some things about the platform are so second nature to me that to not have them seems strange.</p>

<p>But there are things about Mastodon that I am really enjoying. One of these is the split of timelines. There are three: <strong>Home</strong>, <strong>Local</strong> and <strong>Federated</strong>. And all of them show you posts in chronological order (remember that?! remember <strong><em>chronological order</em></strong>).</p>

<ul>
  <li><strong>Home</strong> is what you think your Twitter timeline <em>should</em> be. In other words, it is posts from people you follow (regardless of what server they are on). That’s it. Anything they’ve posted, or anything they have Boosted, nothing more, nothing less. (“Boosted” is the Mastodon term for sharing someone else’s post - analogous to Retweets on Twitter)</li>
  <li><strong>Local</strong> shows you all of the posts from people on your server. Because you’ve likely picked a server that aligns with one of your interests, this is a good way to keep in touch with that interest. Sure, not everyone is posting about that thing all the time. The experience might be similar to a curated Twitter list.</li>
  <li><strong>Federated</strong> shows you all the posts from all the users in all the servers that your instance is federated with. This one is a little more complicated to wrap your head around. In simple terms, if I’m on Server A, and I follow someone from Server B, then Server A and B become “federated”, and all of the posts on Server B now show up on the Federated timeline of all Server A’s users (and vice-versa). In practical terms, this is basically a ‘global’ view of Mastodon.</li>
</ul>

<h3 id="other-things-i-like">Other things I like</h3>

<p><strong>You can’t ‘Quote Boost’.</strong> When you Boost something, you just air it on your platform. You can’t add commentary to it, you can’t opine on it. You just post it to your feed. This is a deliberate feature, designed on the one hand to allow authors to have their views shared without someone else’s lens, and on the other to reduce the amount of airtime that negative posting gets.</p>

<p><strong>Favouriting something doesn’t add it to your Feed</strong> - This is one of those things that makes sense if you use Twitter in a specific way. I don’t like to use it in that way, so the fact that favouriting something made it appear on my feed always bugged me. There’s none of that in Mastodon. If I favourite a post, it’s for the benefit of me, and for the benefit of the author.</p>

<p><strong>You can add whatever you want to your profile</strong> - Using meta tags, you can add as much detail to your profile as you want. Most commonly, people use them to signpost to other places on the internet that they exist. This is a tiny little quality of life thing that ultimately doesn’t make or break the platform. But I think it’s nice.</p>

<p><strong>There’s a 500 character limit</strong> - I think it makes the dialogue across Mastodon more natural, and the discourse richer. I’ll admit, when Twitter increased their limit from 140 characters, I was on the fence. I liked that the limit was so small, as it made me really consider the things I posted. But the way we used such platforms has changed, and having the extra room to breathe does make getting your point across easier. Also (and I probably need reminding of this more than most) it’s a <em>limit</em>, not a <em>target</em>. <strong><em>EDIT: Turns out this depends on the server you’re on. I have 500 character on mine, others have less, some have up to 5000.</em></strong></p>

<h2 id="so-which-is-better">So which is better?</h2>

<p>Sadly, it doesn’t work like that. I’d love to be able to tell you, dear reader. But aside from the fact that you are not me, and therefore our opinions will likely differ, for me the actual answer comes down to what I use each platform for.</p>

<p>We’re certainly seeing a large exodus of Twitter users - or at least a huge influx of users to the Fediverse. But I don’t think Twitter is going to go anywhere soon. And much like politics of any nature, the average person probably doesn’t really care about the hot mess behind the scenes. They use it to connect to their friends / peers / sector, and to maintain their own corner of the ether.</p>

<p>For me personally, I’m getting much more value from Mastodon than I’m currently getting from Twitter. I find it easier to engage and interact not just with individuals but also topics. The server I’ve joined is <a href="https://fosstodon.org/">Fosstodon</a> - which primarily discusses Free and Open Source software. I’ve enjoyed following along with people’s software projects, and seeing insights from various tech conferences. These are all things I used to do with Twitter lists, but for me that just doesn’t click as much anymore, at least not for “techy stuff”.</p>

<p>It’s not necessarily the case with all the hats I wear - the UK Social Enterprise / Charity / Foundation space is still pretty active on the Twitter, so I tend to flit back and forth a bit. It’s horses for courses, I suppose is what I’m saying.</p>

<p>But if you do find yourself in the Fediverse, find yourself a good server, and start engaging with people.</p>]]></content><author><name></name></author><category term="social media" /><category term="twitter" /><category term="fediverse" /><category term="mastodon" /><category term="featured" /><summary type="html"><![CDATA[It's been some time since I started using Mastodon. Here are some of the things I prefer about the platform, and somethings I still use Twitter for.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://willrc.co.uk/assets/images/articles/social-media.jpg" /><media:content medium="image" url="https://willrc.co.uk/assets/images/articles/social-media.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Counterfeit coins - Solving a logic puzzle with Javascript</title><link href="https://willrc.co.uk/articles/counterfeit-coins-logic-puzzle/" rel="alternate" type="text/html" title="Counterfeit coins - Solving a logic puzzle with Javascript" /><published>2022-11-08T10:00:00+00:00</published><updated>2022-11-08T10:00:00+00:00</updated><id>https://willrc.co.uk/articles/counterfeit-coins-logic-puzzle</id><content type="html" xml:base="https://willrc.co.uk/articles/counterfeit-coins-logic-puzzle/"><![CDATA[<p><strong><em>It’s been a while since I’ve done coding for the fun of it, so I thought I’d get back into the game, and bring you along for the ride. In a series of these posts, I’ll be solving problems with code. Sort of like doing a crossword puzzle for nerds. There isn’t really a point to these, except to show some of the practical (and non-practical) uses for actual coding.</em></strong></p>

<p><a href="https://willrc.co.uk/articles/function-check-nested-brackets/">Last time</a>, I looked at creating a function for checking nested brackets. In this post, I’ll be walking through how to write some code to demonstrate a solution to a logic puzzle.</p>

<p>The logic puzzle in question is the following:</p>

<blockquote>
  <p>You have 10 piles of 10 coins. The coins in 9 of these piles are genuine. All of the coins in the remaining pile are counterfeit. You can tell a counterfeit coin by its weight - it is heavier than a genuine coin. Real coins weigh 10 units, and fake ones weigh 11. In as few measurements as possible, determine which is the counterfeit pile?</p>
</blockquote>

<p>Let’s get to work.</p>

<h2 id="setting-up-the-problem">Setting up the problem</h2>

<p>For this exercise, I’m going to use the WebDev staple Javascript to do a series of checks. To start, I’m going to create my piles of coins. For this first stage, I’m arbitrarily going to set the 6th pile to be the counterfeit, but once I’m done it won’t matter. I’m going to create each pile as an array, with the value of each element equal to the weight. In this case, real coins weigh 10 units, and fake ones weigh 11:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nx">P1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">];</span>
<span class="nx">P2</span> <span class="o">=</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">];</span>
<span class="nx">P3</span> <span class="o">=</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">];</span>
<span class="nx">P4</span> <span class="o">=</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">];</span>
<span class="nx">P5</span> <span class="o">=</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">];</span>
<span class="nx">P6</span> <span class="o">=</span> <span class="p">[</span><span class="mi">11</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">11</span><span class="p">];</span>
<span class="nx">P7</span> <span class="o">=</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">];</span>
<span class="nx">P8</span> <span class="o">=</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">];</span>
<span class="nx">P9</span> <span class="o">=</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">];</span>
<span class="nx">P10</span> <span class="o">=</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">];</span>

</code></pre></div></div>

<p>The array gives us the option to easily analyse both the pile as a whole, and also the individual coins in that pile.</p>

<h2 id="thinking-through-the-logic">Thinking through the logic</h2>

<p>Pretty much all coding is dealing with logic problems. You want an end result, so how do you get there. Computers are logic engines, that’s it. They will do exactly what you tell them to, but in a monkey paw sort of way, they will do <em>exactly</em> what you tell them to. So you need to understand what that means.</p>

<p>Anyway, soap box back away, let’s think about this problem. Let’s revisit the things we know:</p>

<ol>
  <li>We know the total number of coins is 100</li>
  <li>We know that 10 of them are fake</li>
  <li>We know all the fake coins are in the same pile</li>
  <li>We know all the piles have 10 coins</li>
  <li>We know the weight of a real coin, and the weight of a fake coin</li>
</ol>

<p>So, based on this we can make some further assumptions:</p>

<ul>
  <li>A pile of real coins will weigh <code class="language-plaintext highlighter-rouge">10*10</code>, or 100 units.</li>
  <li>We also know that the fake pile of coins will weigh <code class="language-plaintext highlighter-rouge">10*11</code>, or 110 units.</li>
</ul>

<p>So, clearly one way we can find out which pile is which is to weigh each pile. It’s arduous, but we know we’ll get the right answer. Let’s start there.</p>

<h2 id="iterating-through-the-arrays">Iterating through the arrays</h2>

<p>Let’s write some code that iterates through each of the arrays and gives us the weight. For ease, we’ll create it as a function so that we can reuse it:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kd">function</span> <span class="nx">weigh_pile</span><span class="p">(</span> <span class="nx">pile</span> <span class="p">){</span>
    <span class="kd">let</span> <span class="nx">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span> <span class="kd">const</span> <span class="nx">value</span> <span class="k">of</span> <span class="nx">pile</span> <span class="p">){</span>
        <span class="nx">sum</span> <span class="o">+=</span> <span class="nx">value</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">sum</span><span class="p">;</span>
<span class="p">}</span>

</code></pre></div></div>

<p>It’s a pretty simple function. We’re creating a variable called <code class="language-plaintext highlighter-rouge">sum</code> and as we iterate through the array we’re adding the value of the iteration to that variable. At the end of the function, we spit out the total value of the variable.</p>

<p>So, let’s put it to work. Now, this is Javascript, so we need to display this data somewhere. For now we’ll put it into a browser console using the <code class="language-plaintext highlighter-rouge">console.log()</code> function:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="dl">"</span><span class="s2">P1 weight: </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">weigh_pile</span><span class="p">(</span> <span class="nx">P1</span> <span class="p">)</span> <span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="dl">"</span><span class="s2">P2 weight: </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">weigh_pile</span><span class="p">(</span> <span class="nx">P2</span> <span class="p">)</span> <span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="dl">"</span><span class="s2">P3 weight: </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">weigh_pile</span><span class="p">(</span> <span class="nx">P3</span> <span class="p">)</span> <span class="p">);</span>
<span class="p">...</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="dl">"</span><span class="s2">P10 weight: </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">weigh_pile</span><span class="p">(</span> <span class="nx">P10</span> <span class="p">)</span> <span class="p">);</span>

</code></pre></div></div>

<p>So, after we review the log we see that Pile 6 weighs more than the others - in fact it weighs 110 units - so that is the counterfeit pile. Congratulations, we’ve solved the problem. There’s definitely some room for improvement here though - for starters this requires 10 separate weighs. Really, the only way we could have made this longer is if we’d weighed each individual coin.</p>

<h2 id="maths-to-the-rescue">Maths to the rescue</h2>

<p>We actually have all we need to make this process much simpler. Because we know all the coins are in one pile, and because we know the weights of both the real and fake coins, we can create a new pile with a mixture of coins. If we take one coin from the first pile, two coins from the second, three from the third, etc all the way to the 10th pile, we can create a stack that gives us all we need to know.</p>

<p>Let’s create a new array, this time with increasing numbers of coins from each pile. (And remember that arrays in Javascript start on 0):</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nx">new_pile</span> <span class="o">=</span> <span class="p">[</span>
    <span class="nx">P1</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span>
    <span class="nx">P2</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">P2</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span>
    <span class="nx">P3</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">P3</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">P3</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span>
    <span class="nx">P4</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">P4</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">P4</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="nx">P4</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span>
    <span class="nx">P5</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">P5</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">P5</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="nx">P5</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span><span class="nx">P5</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span>
    <span class="nx">P6</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">P6</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">P6</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="nx">P6</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span><span class="nx">P6</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span><span class="nx">P6</span><span class="p">[</span><span class="mi">5</span><span class="p">],</span>
    <span class="nx">P7</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">P7</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">P7</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="nx">P7</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span><span class="nx">P7</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span><span class="nx">P7</span><span class="p">[</span><span class="mi">5</span><span class="p">],</span><span class="nx">P7</span><span class="p">[</span><span class="mi">6</span><span class="p">],</span>
    <span class="nx">P8</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">P8</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">P8</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="nx">P8</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span><span class="nx">P8</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span><span class="nx">P8</span><span class="p">[</span><span class="mi">5</span><span class="p">],</span><span class="nx">P8</span><span class="p">[</span><span class="mi">6</span><span class="p">],</span><span class="nx">P8</span><span class="p">[</span><span class="mi">7</span><span class="p">],</span>
    <span class="nx">P9</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">P9</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">P9</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="nx">P9</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span><span class="nx">P9</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span><span class="nx">P9</span><span class="p">[</span><span class="mi">5</span><span class="p">],</span><span class="nx">P9</span><span class="p">[</span><span class="mi">6</span><span class="p">],</span><span class="nx">P9</span><span class="p">[</span><span class="mi">7</span><span class="p">],</span><span class="nx">P9</span><span class="p">[</span><span class="mi">8</span><span class="p">],</span>
    <span class="nx">P10</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">P10</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">P10</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="nx">P10</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span><span class="nx">P10</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span><span class="nx">P10</span><span class="p">[</span><span class="mi">5</span><span class="p">],</span><span class="nx">P10</span><span class="p">[</span><span class="mi">6</span><span class="p">],</span><span class="nx">P10</span><span class="p">[</span><span class="mi">7</span><span class="p">],</span><span class="nx">P10</span><span class="p">[</span><span class="mi">8</span><span class="p">],</span><span class="nx">P10</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span>
<span class="p">];</span>

</code></pre></div></div>

<p>Now, we need to know the weight of this pile. Luckily we created a function earlier that will do just that, so let’s pop it in and show the result in the console.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="nx">weigh_pile</span><span class="p">(</span> <span class="nx">new_pile</span> <span class="p">)</span> <span class="p">);</span>

</code></pre></div></div>

<p>There’s one more thing we need to know - or rather one more thing we need our script to know. We have a pile of 55 coins, and we know that if those coins were all genuine the pile should weigh <code class="language-plaintext highlighter-rouge">55*10</code>, or 550 units. So let’s make sure we have that, and capture it in a variable.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nx">legit_coins_weight</span> <span class="o">=</span> <span class="nx">new_pile</span><span class="p">.</span><span class="nx">length</span> <span class="o">*</span> <span class="mi">10</span><span class="p">;</span>

</code></pre></div></div>

<p>I could have just stored the number 550 as a variable, but where would the fun be in that? Here I’ve asked the script to take the <code class="language-plaintext highlighter-rouge">length</code> of the array - in other words how many elements it has - and multiplied that by <code class="language-plaintext highlighter-rouge">10</code>.</p>

<p>Right! We have everything we need, and we’ve actually only used our scales once. If you haven’t worked out how all this helps us yet, go grab a cup of tea and let it percolate for a bit.</p>

<h2 id="the-solution">The solution</h2>

<p>Because we know the weights of the coins, and because we know how many coins from each pile we have, we can simply take the difference in the weights of our new pile, and the expected weight of the pile, and get our answer.</p>

<p>So let’s do that.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nx">weight_difference</span> <span class="o">=</span> <span class="nx">new_pile_weight</span> <span class="o">-</span> <span class="nx">legit_coins_weight</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="nx">weight_difference</span> <span class="p">);</span>

</code></pre></div></div>

<p>This tells us that the stack weighs six units more than it should. Because the real and fake coin weights only differ by one, we know that there are 6 fake coins in this pile, and that must mean that OG pile 6 is the counterfeit one.</p>

<h2 id="tidying-up-the-code">Tidying up the code</h2>

<p>Let’s bring this all together, and remove the need to view the console by writing the result directly to the viewport.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="c1">// create arrays with the coin weights</span>
<span class="nx">P1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">];</span>
<span class="nx">P2</span> <span class="o">=</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">];</span>
<span class="nx">P3</span> <span class="o">=</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">];</span>
<span class="nx">P4</span> <span class="o">=</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">];</span>
<span class="nx">P5</span> <span class="o">=</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">];</span>
<span class="nx">P6</span> <span class="o">=</span> <span class="p">[</span><span class="mi">11</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">11</span><span class="p">];</span>
<span class="nx">P7</span> <span class="o">=</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">];</span>
<span class="nx">P8</span> <span class="o">=</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">];</span>
<span class="nx">P9</span> <span class="o">=</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">];</span>
<span class="nx">P10</span> <span class="o">=</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">];</span>

<span class="c1">// create a new pile that takes one coin from the first pile, two from the second...</span>
<span class="nx">new_pile</span> <span class="o">=</span> <span class="p">[</span>
    <span class="nx">P1</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span>
    <span class="nx">P2</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">P2</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span>
    <span class="nx">P3</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">P3</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">P3</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span>
    <span class="nx">P4</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">P4</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">P4</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="nx">P4</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span>
    <span class="nx">P5</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">P5</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">P5</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="nx">P5</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span><span class="nx">P5</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span>
    <span class="nx">P6</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">P6</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">P6</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="nx">P6</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span><span class="nx">P6</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span><span class="nx">P6</span><span class="p">[</span><span class="mi">5</span><span class="p">],</span>
    <span class="nx">P7</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">P7</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">P7</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="nx">P7</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span><span class="nx">P7</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span><span class="nx">P7</span><span class="p">[</span><span class="mi">5</span><span class="p">],</span><span class="nx">P7</span><span class="p">[</span><span class="mi">6</span><span class="p">],</span>
    <span class="nx">P8</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">P8</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">P8</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="nx">P8</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span><span class="nx">P8</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span><span class="nx">P8</span><span class="p">[</span><span class="mi">5</span><span class="p">],</span><span class="nx">P8</span><span class="p">[</span><span class="mi">6</span><span class="p">],</span><span class="nx">P8</span><span class="p">[</span><span class="mi">7</span><span class="p">],</span>
    <span class="nx">P9</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">P9</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">P9</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="nx">P9</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span><span class="nx">P9</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span><span class="nx">P9</span><span class="p">[</span><span class="mi">5</span><span class="p">],</span><span class="nx">P9</span><span class="p">[</span><span class="mi">6</span><span class="p">],</span><span class="nx">P9</span><span class="p">[</span><span class="mi">7</span><span class="p">],</span><span class="nx">P9</span><span class="p">[</span><span class="mi">8</span><span class="p">],</span>
    <span class="nx">P10</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">P10</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">P10</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="nx">P10</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span><span class="nx">P10</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span><span class="nx">P10</span><span class="p">[</span><span class="mi">5</span><span class="p">],</span><span class="nx">P10</span><span class="p">[</span><span class="mi">6</span><span class="p">],</span><span class="nx">P10</span><span class="p">[</span><span class="mi">7</span><span class="p">],</span><span class="nx">P10</span><span class="p">[</span><span class="mi">8</span><span class="p">],</span><span class="nx">P10</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span>
<span class="p">];</span>

<span class="c1">// build our scales to weigh the piles</span>
<span class="kd">function</span> <span class="nx">weigh_pile</span><span class="p">(</span> <span class="nx">pile</span> <span class="p">){</span>
    <span class="kd">let</span> <span class="nx">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span> <span class="kd">const</span> <span class="nx">value</span> <span class="k">of</span> <span class="nx">pile</span> <span class="p">){</span>
        <span class="nx">sum</span> <span class="o">+=</span> <span class="nx">value</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">sum</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// calculate the expected weight of the new pile, assuming all coins weigh 10 units</span>
<span class="nx">legit_coins_weight</span> <span class="o">=</span> <span class="nx">new_pile</span><span class="p">.</span><span class="nx">length</span> <span class="o">*</span> <span class="mi">10</span><span class="p">;</span>

<span class="c1">// calculate the actual weight of the new pile</span>
<span class="nx">new_pile_weight</span> <span class="o">=</span> <span class="nx">weigh_coins</span><span class="p">(</span><span class="nx">new_pile</span><span class="p">);</span>

<span class="c1">// calculate the difference</span>
<span class="c1">// fake coins weigh 1 unit more than real ones, so the difference will tell us how many of the fake coins are in the pile, and therefore what pile they are in</span>
<span class="nx">weight_difference</span> <span class="o">=</span> <span class="nx">new_pile_weight</span> <span class="o">-</span> <span class="nx">legit_coins_weight</span><span class="p">;</span>

<span class="c1">// give the result directly in the page</span>
<span class="nb">document</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span> <span class="dl">"</span><span class="s2">Coins are in pile </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">weight_difference</span> <span class="p">);</span>

</code></pre></div></div>

<p>You can test the code works by changing the initial arrays to give a different pile the coins that weigh 11 units.</p>

<h2 id="variations-and-limitations">Variations and limitations</h2>

<h3 id="variation-fake-coins-weigh-more-than-11-units">Variation: Fake coins weigh more than 11 units</h3>

<p>What happens if we know the weights of the coins, but they weigh more than one unit more? Well we just need to add some instructions to take this into account. Again, maths is our friend here. What we are actually looking for is the difference in weight between the two piles, divided by the weight difference between the real and fake coins. We just missed this step last time because the weight difference was one. So let’s add that in.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nx">real_coin_weight</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
<span class="nx">fake_coin_weight</span> <span class="o">=</span> <span class="mi">11</span><span class="p">;</span>

<span class="nx">difference_in_coin_weight</span> <span class="o">=</span> <span class="nx">fake_coin_weight</span> <span class="o">-</span> <span class="nx">real_coin_weight</span><span class="p">;</span>

<span class="nx">pile_number</span> <span class="o">=</span> <span class="nx">weight_difference</span> <span class="o">/</span> <span class="nx">difference_in_coin_weight</span><span class="p">;</span>

<span class="nb">document</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span> <span class="dl">"</span><span class="s2">Coins are in pile P</span><span class="dl">"</span> <span class="o">+</span> <span class="nx">pile_number</span> <span class="p">);</span>

</code></pre></div></div>

<p>This code should come after the <code class="language-plaintext highlighter-rouge">weight_difference</code> calculation, and replace the <code class="language-plaintext highlighter-rouge">document.write()</code> command in the previous code. The <code class="language-plaintext highlighter-rouge">real_coin_weight</code> and <code class="language-plaintext highlighter-rouge">fake_coin_weight</code> variables can be changed as necessary, and the code will still hold.</p>

<h3 id="limitation-there-are-more-than-10-piles">Limitation: There are more than 10 piles</h3>

<p>The current setup is contingent us being able to take a different number of coins from each pile. At 10 piles of 10 coins, we’re at the top end of what this solution can do for us. Our solution breaks if we try to put in an 11th pile with 10 coins.</p>

<h2 id="final-thoughts">Final thoughts</h2>

<p>It might seem like a weird exercise to do - by the nature of the thing, we know which pile is heavier going in. For me though, this wasn’t really about the problem. Solving the problem happened “off the keyboard” as it where. I enjoyed the exercise of building something that would follow the logic through.</p>]]></content><author><name></name></author><category term="logic puzzle" /><category term="javascript" /><summary type="html"><![CDATA[Solving a logic puzzle using Javascript]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://willrc.co.uk/assets/images/articles/code.jpg" /><media:content medium="image" url="https://willrc.co.uk/assets/images/articles/code.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Crossword Puzzle for Nerds: Checking if brackets are nested</title><link href="https://willrc.co.uk/articles/function-check-nested-brackets/" rel="alternate" type="text/html" title="Crossword Puzzle for Nerds: Checking if brackets are nested" /><published>2022-10-31T08:00:00+00:00</published><updated>2022-10-31T08:00:00+00:00</updated><id>https://willrc.co.uk/articles/function-check-nested-brackets</id><content type="html" xml:base="https://willrc.co.uk/articles/function-check-nested-brackets/"><![CDATA[<p><strong><em>It’s been a while since I’ve done coding for the fun of it, so I thought I’d get back into the game, and bring you along for the ride. In a series of these posts, I’ll be solving problems with code. Sort of like doing a crossword puzzle for nerds.</em></strong></p>

<p>In this post, I’ll be writing a function that takes an input and decides if it is well structured. Here’s the criteria:</p>

<blockquote>
  <p>The input can contain any number of any type of bracket - round, square, or curly. Open brackets must have a corresponding closed bracket. Brackets must be properly nested.</p>
</blockquote>

<p>In other words, (something like [this]) would be fine, [but (this]) would not.</p>

<p>This particular puzzle was given to me as part of an exercise in front of other developers. Full disclosure, this is not the solution I came up with in the room, but rather one I arrived at immediately after the pressure was off, and has been influenced by the help they offered.</p>

<p>Let’s get to work.</p>

<h2 id="looping-through-the-input">Looping through the input</h2>

<p>For this problem I’m going to use Javascript to take an input string and run some checks on it. The first thing I’ll need to do is to isolate any brackets. I’m going to use a <code class="language-plaintext highlighter-rouge">for</code> loop to iterate through the input string, analysing each character. For now, I’m just going to spit the brackets out to the console. Let’s see what that might look like:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kd">function</span> <span class="nx">parse_input</span><span class="p">(</span> <span class="nx">input_string</span> <span class="p">){</span>

    <span class="k">for</span><span class="p">(</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">input_string</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">){</span>
            <span class="k">if</span><span class="p">(</span> <span class="nx">input_string</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">==</span> <span class="dl">"</span><span class="s2">{</span><span class="dl">"</span> <span class="o">||</span> <span class="nx">input_string</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">==</span> <span class="dl">"</span><span class="s2">}</span><span class="dl">"</span> <span class="o">||</span> <span class="nx">input_string</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">==</span> <span class="dl">"</span><span class="s2">(</span><span class="dl">"</span> <span class="o">||</span> <span class="nx">input_string</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">==</span> <span class="dl">"</span><span class="s2">)</span><span class="dl">"</span> <span class="o">||</span> <span class="nx">input_string</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">==</span> <span class="dl">"</span><span class="s2">[</span><span class="dl">"</span> <span class="o">||</span> <span class="nx">input_string</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">==</span> <span class="dl">"</span><span class="s2">]</span><span class="dl">"</span>  <span class="p">){</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="nx">input_string</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>

<span class="p">}</span>

</code></pre></div></div>

<p>Ok, so this works. But even at this stage I feel like I’m going to be running a lot of checks, and frankly this notation is giving me a headache. What I want is a way to group things together to make them easier to analyse.</p>

<h2 id="arrays-for-days">Arrays for days</h2>

<p>I’m going to start by creating an array with all the bracket options in it. That way, rather than my lengthy notation that compares every character in the input string to each option, I’ll just check if it’s in the bracket array.</p>

<p>Then, because all I’m actually interested in are the brackets, I’m going to push them all out to a new array so I can manipulate that, rather than the whole string.</p>

<p>So, let’s rework our code a little bit.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nx">all_brackets</span> <span class="o">=</span> <span class="p">[</span><span class="dl">"</span><span class="s2">(</span><span class="dl">"</span><span class="p">,</span><span class="dl">"</span><span class="s2">)</span><span class="dl">"</span><span class="p">,</span><span class="dl">"</span><span class="s2">[</span><span class="dl">"</span><span class="p">,</span><span class="dl">"</span><span class="s2">]</span><span class="dl">"</span><span class="p">,</span><span class="dl">"</span><span class="s2">{</span><span class="dl">"</span><span class="p">,</span><span class="dl">"</span><span class="s2">}</span><span class="dl">"</span><span class="p">];</span>
<span class="nx">capture_brackets</span> <span class="o">=</span> <span class="p">[];</span>

<span class="kd">function</span> <span class="nx">parse_input</span><span class="p">(</span> <span class="nx">input_string</span> <span class="p">){</span>

    <span class="k">for</span><span class="p">(</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">input_string</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">){</span>
            <span class="k">if</span><span class="p">(</span> <span class="nx">all_brackets</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span> <span class="nx">input_string</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">)</span> <span class="p">){</span>
                <span class="nx">capture_brackets</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span> <span class="nx">input_string</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>

<span class="p">}</span>

</code></pre></div></div>

<p>There, much neater.</p>

<h2 id="lets-go-back-to-the-problem">Let’s go back to the problem</h2>

<p>So far, we’ve got a function that takes out all our brackets and makes it easier to manipulate. That’s good, but what are we actually trying to achieve?</p>

<p>Because we now have our <code class="language-plaintext highlighter-rouge">capture_brackets[]</code> array, we can iterate through that and check that we have proper nesting. How do we do that? Well, we know that for the input string to be valid, if I open a bracket I have to either close it with the same bracket, or else open another bracket. If I take an open bracket and then next one in the sequence is the wrong closed bracket, then I know the input string is not valid.</p>

<p>Let’s spitball what that might look like:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kd">function</span> <span class="nx">check_nesting</span><span class="p">(</span> <span class="nx">capture_brackets</span> <span class="p">){</span>

    <span class="k">for</span><span class="p">(</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">capture_brackets</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">){</span>

        <span class="k">if</span><span class="p">(</span> <span class="nx">capture_brackets</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">==</span> <span class="dl">"</span><span class="s2">(</span><span class="dl">"</span> <span class="p">){</span>
                
            <span class="k">if</span><span class="p">(</span> <span class="nx">capture_brackets</span><span class="p">[</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="dl">"</span><span class="s2">}</span><span class="dl">"</span> <span class="o">||</span> <span class="nx">capture_brackets</span><span class="p">[</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="dl">"</span><span class="s2">]</span><span class="dl">"</span> <span class="p">){</span>

                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">invalid input string</span><span class="dl">"</span><span class="p">);</span>

            <span class="p">}</span>

        <span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span> <span class="nx">capture_brackets</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">==</span> <span class="dl">"</span><span class="s2">{</span><span class="dl">"</span> <span class="p">){</span>
                
            <span class="k">if</span><span class="p">(</span> <span class="nx">capture_brackets</span><span class="p">[</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="dl">"</span><span class="s2">)</span><span class="dl">"</span> <span class="o">||</span> <span class="nx">capture_brackets</span><span class="p">[</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="dl">"</span><span class="s2">]</span><span class="dl">"</span> <span class="p">){</span>

                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">invalid input string</span><span class="dl">"</span><span class="p">);</span>

            <span class="p">}</span>

        <span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span> <span class="nx">capture_brackets</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">==</span> <span class="dl">"</span><span class="s2">[</span><span class="dl">"</span> <span class="p">){</span>
                
            <span class="k">if</span><span class="p">(</span> <span class="nx">capture_brackets</span><span class="p">[</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="dl">"</span><span class="s2">}</span><span class="dl">"</span> <span class="o">||</span> <span class="nx">capture_brackets</span><span class="p">[</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="dl">"</span><span class="s2">)</span><span class="dl">"</span> <span class="p">){</span>

                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">invalid input string</span><span class="dl">"</span><span class="p">);</span>

            <span class="p">}</span>

        <span class="p">}</span>

    <span class="p">}</span>

<span class="p">}</span>

</code></pre></div></div>

<p>So, this looks like a promising start, but there are several problems. And, I’ll be honest with you, this little rabbit hole is one I spent a little longer down than I should have. I did need a little nudge from the other devs to get out of this.</p>

<p>The fundamental problem with this method is that it has no “memory”. In other words, if I have an input string that looks like this <code class="language-plaintext highlighter-rouge">[]{}]</code> where I have a trailing closed bracket with no corresponding open bracket, it won’t flag because all this function is looking at is the immediate character and the one after.</p>

<p>So, let’s rethink this slightly…</p>

<h2 id="sail-array-with-me-honey">Sail array with me, honey</h2>

<p>So far we’ve been looking at this problem linearly. In other words, we’ve been looking for opening brackets and then checking that the next one in the sequence matches. What if instead we looked for closed brackets and then worked backwards? If we assume a perfectly nested input - something like <code class="language-plaintext highlighter-rouge">{([])}</code> then the first closed bracket we hit will have to be immediately preceded by the corresponding opening bracket. We just need our function to “remember” what the opening brackets are.</p>

<p>So now the problem is “memory”. We know how to solve memory problems - our old friend arrays! As we iterate through out <code class="language-plaintext highlighter-rouge">capture_bracket[]</code> array, when we hit an open bracket we can push that to a new array and then carry on. When we hit a closed bracket, we need to check the last opening bracket of the new array. If they don’t match, we have a problem. If they do match, then we can remove the last open bracket from the new array, and then move on.</p>

<p>Let’s map this out:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nx">open_brackets</span> <span class="o">=</span> <span class="p">[</span><span class="dl">"</span><span class="s2">(</span><span class="dl">"</span><span class="p">,</span><span class="dl">"</span><span class="s2">[</span><span class="dl">"</span><span class="p">,</span><span class="dl">"</span><span class="s2">{</span><span class="dl">"</span><span class="p">];</span>
<span class="nx">closed_brackets</span> <span class="o">=</span> <span class="p">[</span><span class="dl">"</span><span class="s2">)</span><span class="dl">"</span><span class="p">,</span><span class="dl">"</span><span class="s2">]</span><span class="dl">"</span><span class="p">,</span><span class="dl">"</span><span class="s2">}</span><span class="dl">"</span><span class="p">];</span>
<span class="nx">capture_open_brackets</span> <span class="o">=</span> <span class="p">[];</span>

<span class="kd">function</span> <span class="nx">check_nesting</span><span class="p">(</span> <span class="nx">capture_brackets</span> <span class="p">){</span>

    <span class="k">for</span><span class="p">(</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">capture_brackets</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">){</span>
                    
        <span class="k">if</span><span class="p">(</span> <span class="nx">open_brackets</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span> <span class="nx">capture_brackets</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">)</span>  <span class="p">){</span>
            
            <span class="nx">capture_open_brackets</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span> <span class="nx">capture_brackets</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">);</span>

        <span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span> <span class="nx">closed_brackets</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span> <span class="nx">capture_brackets</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">)</span>  <span class="p">){</span>
            
            <span class="nx">last_bracket</span> <span class="o">=</span> <span class="nx">capture_open_brackets</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
            
            <span class="k">if</span><span class="p">(</span> <span class="nx">capture_brackets</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">==</span> <span class="dl">"</span><span class="s2">)</span><span class="dl">"</span> <span class="p">){</span>
                <span class="k">if</span><span class="p">(</span> <span class="nx">last_bracket</span> <span class="o">==</span> <span class="dl">"</span><span class="s2">(</span><span class="dl">"</span> <span class="p">){</span>
                    <span class="nx">capture_open_brackets</span><span class="p">.</span><span class="nx">pop</span><span class="p">();</span>
                <span class="p">}</span><span class="k">else</span><span class="p">{</span>
                    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">input invalid</span><span class="dl">"</span><span class="p">);</span>
                <span class="p">}</span>
            <span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span> <span class="nx">capture_brackets</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">==</span> <span class="dl">"</span><span class="s2">]</span><span class="dl">"</span> <span class="p">){</span>
                <span class="k">if</span><span class="p">(</span> <span class="nx">last_bracket</span> <span class="o">==</span> <span class="dl">"</span><span class="s2">[</span><span class="dl">"</span> <span class="p">){</span>
                    <span class="nx">capture_open_brackets</span><span class="p">.</span><span class="nx">pop</span><span class="p">();</span>
                <span class="p">}</span><span class="k">else</span><span class="p">{</span>
                    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">input invalid</span><span class="dl">"</span><span class="p">);</span>
                <span class="p">}</span>
            <span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span> <span class="nx">capture_brackets</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">==</span> <span class="dl">"</span><span class="s2">}</span><span class="dl">"</span> <span class="p">){</span>
                <span class="k">if</span><span class="p">(</span> <span class="nx">last_bracket</span> <span class="o">==</span> <span class="dl">"</span><span class="s2">{</span><span class="dl">"</span> <span class="p">){</span>
                    <span class="nx">capture_open_brackets</span><span class="p">.</span><span class="nx">pop</span><span class="p">();</span>
                <span class="p">}</span><span class="k">else</span><span class="p">{</span>
                    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">input invalid</span><span class="dl">"</span><span class="p">);</span>
                <span class="p">}</span>
            <span class="p">}</span><span class="k">else</span><span class="p">{</span> 
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">something went wrong with the check</span><span class="dl">"</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span><span class="k">else</span><span class="p">{</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">something went wrong</span><span class="dl">"</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

<span class="p">}</span>

</code></pre></div></div>

<p>So, going through this bit by bit, what we’re doing is iterating through the <code class="language-plaintext highlighter-rouge">capture_brackets</code> input and saying that if we hit an open bracket, push that into the new <code class="language-plaintext highlighter-rouge">capture_open_brackets[]</code> array. If we hit a closed bracket, then take the last open bracket we saw (using <code class="language-plaintext highlighter-rouge">capture_open_brackets.slice(-1)</code>) and then run some checks on that. Those checks essentially try to match the pairs. If the check is successful, remove that last open bracket from the array (using <code class="language-plaintext highlighter-rouge">capture_open_brackets.pop()</code>) and carry on. If the check fails, send a message to the console. I’ve also added some <code class="language-plaintext highlighter-rouge">console.log()</code> functions in there, just incase I’ve failed to account for something.</p>

<p>I think we’ve got our component parts. Let’s start to bring them together.</p>

<h2 id="linking-the-functions">Linking the functions</h2>

<p>So, thinking back to the original problem statement, we need a way for inputted text to be checked and, presumably, the inputter to be told whether their input is valid. So far we’ve been working in the abstract, so before we go any further let’s create a very basic input/output on a webpage. I’m not going to bother here with full HTML notation - but don’t let my laziness rub off on you.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nt">&lt;html&gt;</span>

<span class="nt">&lt;input</span> <span class="na">id=</span><span class="s">"input_code"</span><span class="nt">&gt;</span>
<span class="nt">&lt;button</span> <span class="na">onclick=</span><span class="s">"parse_input()"</span><span class="nt">&gt;</span>Check<span class="nt">&lt;/button&gt;</span>
<span class="nt">&lt;p</span> <span class="na">id=</span><span class="s">"response_text"</span><span class="nt">&gt;&lt;/p&gt;</span>

<span class="nt">&lt;/html&gt;</span>

</code></pre></div></div>

<p>Nothing overly complex here - just an input box, a button, and a place for the function to give a verdict. The button calls the <code class="language-plaintext highlighter-rouge">parse_input()</code> function, and we’ve given the input field an id, so we’ll just need to tweak that function to pull the code from there rather than assuming it’s been passed the string.</p>

<p>We’re also going to call the <code class="language-plaintext highlighter-rouge">check_nesting()</code> function from within the first function, and for that we need <code class="language-plaintext highlighter-rouge">check_nesting()</code> to give us back a verdict, rather than spit it out to the console. So we’ll be replacing the <code class="language-plaintext highlighter-rouge">console.log()</code> with <code class="language-plaintext highlighter-rouge">return</code> function in the if/else statements. We’ll use <code class="language-plaintext highlighter-rouge">return 1</code> if the check was successful, and <code class="language-plaintext highlighter-rouge">return 0</code> if it wasn’t.</p>

<p>Finally, that output will be assessed, and then converted into a message for the user.</p>

<p>Let’s see what that all looks like:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nt">&lt;html&gt;</span>

<span class="nt">&lt;script&gt;</span>

    <span class="nx">all_brackets</span> <span class="o">=</span> <span class="p">[</span><span class="dl">"</span><span class="s2">(</span><span class="dl">"</span><span class="p">,</span><span class="dl">"</span><span class="s2">)</span><span class="dl">"</span><span class="p">,</span><span class="dl">"</span><span class="s2">[</span><span class="dl">"</span><span class="p">,</span><span class="dl">"</span><span class="s2">]</span><span class="dl">"</span><span class="p">,</span><span class="dl">"</span><span class="s2">{</span><span class="dl">"</span><span class="p">,</span><span class="dl">"</span><span class="s2">}</span><span class="dl">"</span><span class="p">];</span>
    <span class="nx">open_brackets</span> <span class="o">=</span> <span class="p">[</span><span class="dl">"</span><span class="s2">(</span><span class="dl">"</span><span class="p">,</span><span class="dl">"</span><span class="s2">[</span><span class="dl">"</span><span class="p">,</span><span class="dl">"</span><span class="s2">{</span><span class="dl">"</span><span class="p">];</span>
    <span class="nx">closed_brackets</span> <span class="o">=</span> <span class="p">[</span><span class="dl">"</span><span class="s2">)</span><span class="dl">"</span><span class="p">,</span><span class="dl">"</span><span class="s2">]</span><span class="dl">"</span><span class="p">,</span><span class="dl">"</span><span class="s2">}</span><span class="dl">"</span><span class="p">];</span>

    <span class="nx">capture_brackets</span> <span class="o">=</span> <span class="p">[];</span>
    <span class="nx">capture_open_brackets</span> <span class="o">=</span> <span class="p">[];</span>

    <span class="kd">function</span> <span class="nx">parse_input</span><span class="p">(){</span>
        
        <span class="nx">input_string</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">input_code</span><span class="dl">"</span><span class="p">).</span><span class="nx">value</span><span class="p">;</span>

        <span class="k">for</span><span class="p">(</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">input_string</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">){</span>
            <span class="k">if</span><span class="p">(</span> <span class="nx">all_brackets</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span> <span class="nx">input_string</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">)</span>  <span class="p">){</span>
                <span class="nx">capture_brackets</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span> <span class="nx">input_string</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="nx">output</span> <span class="o">=</span> <span class="nx">check_nesting</span><span class="p">(</span> <span class="nx">capture_brackets</span> <span class="p">);</span>

        <span class="k">if</span><span class="p">(</span> <span class="nx">output</span> <span class="o">==</span> <span class="mi">1</span> <span class="p">){</span>
            <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">response_text</span><span class="dl">"</span><span class="p">).</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">This code is fine.</span><span class="dl">"</span><span class="p">;</span>
        <span class="p">}</span><span class="k">else</span><span class="p">{</span>
            <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">response_text</span><span class="dl">"</span><span class="p">).</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">This code sucks.</span><span class="dl">"</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="nx">clear_capture_arrays</span><span class="p">();</span>

    <span class="p">}</span>

    <span class="kd">function</span> <span class="nx">check_nesting</span><span class="p">(</span> <span class="nx">capture_brackets</span> <span class="p">){</span>

        <span class="k">for</span><span class="p">(</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">capture_brackets</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">){</span>
                        
            <span class="k">if</span><span class="p">(</span> <span class="nx">open_brackets</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span> <span class="nx">capture_brackets</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">)</span>  <span class="p">){</span>
                
                <span class="nx">capture_open_brackets</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span> <span class="nx">capture_brackets</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">);</span>

            <span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span> <span class="nx">closed_brackets</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span> <span class="nx">capture_brackets</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">)</span>  <span class="p">){</span>
                
                <span class="nx">last_bracket</span> <span class="o">=</span> <span class="nx">capture_open_brackets</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
                
                <span class="k">if</span><span class="p">(</span> <span class="nx">capture_brackets</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">==</span> <span class="dl">"</span><span class="s2">)</span><span class="dl">"</span> <span class="p">){</span>
                    <span class="k">if</span><span class="p">(</span> <span class="nx">last_bracket</span> <span class="o">==</span> <span class="dl">"</span><span class="s2">(</span><span class="dl">"</span> <span class="p">){</span>
                        <span class="nx">capture_open_brackets</span><span class="p">.</span><span class="nx">pop</span><span class="p">();</span>
                    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
                        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
                    <span class="p">}</span>
                <span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span> <span class="nx">capture_brackets</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">==</span> <span class="dl">"</span><span class="s2">]</span><span class="dl">"</span> <span class="p">){</span>
                    <span class="k">if</span><span class="p">(</span> <span class="nx">last_bracket</span> <span class="o">==</span> <span class="dl">"</span><span class="s2">[</span><span class="dl">"</span> <span class="p">){</span>
                        <span class="nx">capture_open_brackets</span><span class="p">.</span><span class="nx">pop</span><span class="p">();</span>
                    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
                        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
                    <span class="p">}</span>
                <span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span> <span class="nx">capture_brackets</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">==</span> <span class="dl">"</span><span class="s2">}</span><span class="dl">"</span> <span class="p">){</span>
                    <span class="k">if</span><span class="p">(</span> <span class="nx">last_bracket</span> <span class="o">==</span> <span class="dl">"</span><span class="s2">{</span><span class="dl">"</span> <span class="p">){</span>
                        <span class="nx">capture_open_brackets</span><span class="p">.</span><span class="nx">pop</span><span class="p">();</span>
                    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
                        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
                    <span class="p">}</span>
                <span class="p">}</span><span class="k">else</span><span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">something went wrong with the check</span><span class="dl">"</span><span class="p">);</span> <span class="p">}</span>
            <span class="p">}</span><span class="k">else</span><span class="p">{</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">something went wrong</span><span class="dl">"</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>

    <span class="p">}</span>

    <span class="kd">function</span> <span class="nx">clear_capture_arrays</span><span class="p">(){</span>
        <span class="nx">capture_brackets</span> <span class="o">=</span> <span class="p">[];</span>
        <span class="nx">capture_open_brackets</span> <span class="o">=</span> <span class="p">[];</span>
    <span class="p">}</span>

<span class="nt">&lt;/script&gt;</span>

<span class="nt">&lt;input</span> <span class="na">id=</span><span class="s">"input_code"</span><span class="nt">&gt;&lt;button</span> <span class="na">onclick=</span><span class="s">"parse_input();"</span><span class="nt">&gt;</span>Check<span class="nt">&lt;/button&gt;</span>
<span class="nt">&lt;p</span> <span class="na">id=</span><span class="s">"response_text"</span><span class="nt">&gt;&lt;/p&gt;</span>

<span class="nt">&lt;/html&gt;</span>

</code></pre></div></div>

<p>There’s just one more thing I’d added to that code. You may have noticed the <code class="language-plaintext highlighter-rouge">clear_capture_arrays[]</code> call and function. Because we’ve got an input field on a webpage, the user can add and readd code to continually check. In order to make sure we don’t contaminate future runs, we just need to clear out all the arrays at the end of the calculations.</p>

<h2 id="final-thoughts">Final thoughts</h2>

<p>That’s it! We’ve solved the problem. I never doubted us.</p>

<p>Of course, this is by no means the only way to do this - even just using Javascript. One thing I’m always relearning is that a lot of the time, being a developer is more about thinking your way around problems than it is actually writing code. For me, this was a great exercise in that. I’m challenging myself to take on more of these “crossword puzzles for nerds” and I’ll share my journey with you.</p>]]></content><author><name></name></author><category term="javascript" /><summary type="html"><![CDATA[Wherein I write a function to check if brackets are properly nested, just because.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://willrc.co.uk/assets/images/articles/code.jpg" /><media:content medium="image" url="https://willrc.co.uk/assets/images/articles/code.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>